[{"path":"https://ipeagit.github.io/gtfstools/dev/articles/filtering.html","id":"filtering-by-agency_id-route_id-service_id-shape_id-stop_id-trip_id-or-route_type","dir":"Articles","previous_headings":"","what":"Filtering by agency_id, route_id, service_id, shape_id, stop_id, trip_id or route_type:","title":"Filtering GTFS feeds","text":"first six work similar fashion. specify vector identifiers, function keeps (drops, ’ll see soon) entries way related id. Let’s see works using filter_by_trip_id(): can see code snippet function filters trips table, tables contain key can identified via relation trip_id. example, since trips CPTM L07-0 CPTM L07-1 described shapes 17846 17847, respectively, shapes kept smaller_gtfs. function also supports opposite behaviour: instead keeping entries related specified identifiers, can drop . , set keep argument FALSE: specified trips (respective shapes well) nowhere seen. Please note , since keeping many entries second case, resulting GTFS object, though smaller original, much larger first case. logic demonstrated filter_by_trip_id() applies functions filter feeds agency_id, route_id, service_id, shape_id, stop_id route_type.","code":"path <- system.file(\"extdata/spo_gtfs.zip\", package = \"gtfstools\") gtfs <- read_gtfs(path) utils::object.size(gtfs) #> 811304 bytes  head(gtfs$trips[, .(trip_id, trip_headsign, shape_id)]) #>       trip_id trip_headsign shape_id #>        <char>        <char>   <char> #> 1: CPTM L07-0       JUNDIAI    17846 #> 2: CPTM L07-1           LUZ    17847 #> 3: CPTM L08-0  AMADOR BUENO    17848 #> 4: CPTM L08-1 JULIO PRESTES    17849 #> 5: CPTM L09-0        GRAJAU    17850 #> 6: CPTM L09-1        OSASCO    17851  # keeping trips CPTM L07-0 and CPTM L07-1 smaller_gtfs <- filter_by_trip_id(gtfs, c(\"CPTM L07-0\", \"CPTM L07-1\")) utils::object.size(smaller_gtfs) #> 71592 bytes  head(smaller_gtfs$trips[, .(trip_id, trip_headsign, shape_id)]) #>       trip_id trip_headsign shape_id #>        <char>        <char>   <char> #> 1: CPTM L07-0       JUNDIAI    17846 #> 2: CPTM L07-1           LUZ    17847  unique(smaller_gtfs$shapes$shape_id) #> [1] \"17846\" \"17847\" # dropping trips CPTM L07-0 and CPTM L07-1 smaller_gtfs <- filter_by_trip_id(     gtfs,     c(\"CPTM L07-0\", \"CPTM L07-1\"),     keep = FALSE ) utils::object.size(smaller_gtfs) #> 762576 bytes  head(smaller_gtfs$trips[, .(trip_id, trip_headsign, shape_id)]) #>       trip_id       trip_headsign shape_id #>        <char>              <char>   <char> #> 1: CPTM L08-0        AMADOR BUENO    17848 #> 2: CPTM L08-1       JULIO PRESTES    17849 #> 3: CPTM L09-0              GRAJAU    17850 #> 4: CPTM L09-1              OSASCO    17851 #> 5: CPTM L10-0 RIO GRANDE DA SERRA    17852 #> 6: CPTM L10-1                BRÁS    17853  head(unique(smaller_gtfs$shapes$shape_id)) #> [1] \"17848\" \"17849\" \"17850\" \"17851\" \"17852\" \"17853\""},{"path":"https://ipeagit.github.io/gtfstools/dev/articles/filtering.html","id":"filtering-by-day-of-the-week-or-time-of-the-day","dir":"Articles","previous_headings":"","what":"Filtering by day of the week or time of the day:","title":"Filtering GTFS feeds","text":"Frequently enough one wants analyze service levels certain days week different times day. functions filter_by_weekday() filter_by_time_of_day() can used purpose. first one takes days week want keep/drop also includes combine argument controls multi-day filters work. Let’s see works examples: Meanwhile, filter_by_time_of_day() takes beginning end time block (arguments, respectively) keeps entries related trips run within specified block. Please note function works bit differently depending whether trip’s behaviour described using frequencies stop_times tables together using stop_times table alone: stop_times entries trips described frequencies filtered, just “templates” describe long takes one stop another (.e. departure arrival times listed considered “”). Let’s see means example: filtering stop_times table, two options. either keep entire trips cross specified time block, keep trip segments within block (default behaviour). control behaviour can use full_trips parameter: filter_by_time_of_day() also includes update_frequencies argument, used control whether frequencies table start_time end_time fields updated fit inside/outside specified time day. Please read function documentation understand argument interacts exact_times field.","code":"# keeping entries related to services than run on saturdays AND sundays smaller_gtfs <- filter_by_weekday(   gtfs,   weekday = c(\"saturday\", \"sunday\"),   combine = \"and\" ) smaller_gtfs$calendar[, c(\"service_id\", \"sunday\", \"saturday\")] #>    service_id sunday saturday #>        <char>  <int>    <int> #> 1:        USD      1        1 #> 2:        _SD      1        1 #> 3:        USD      1        1 #> 4:        _SD      1        1  # keeping entries related to services than run EITHER on saturdays OR on sundays smaller_gtfs <- filter_by_weekday(   gtfs,   weekday = c(\"sunday\", \"saturday\"),   combine = \"or\" ) smaller_gtfs$calendar[, c(\"service_id\", \"sunday\", \"saturday\")] #>     service_id sunday saturday #>         <char>  <int>    <int> #>  1:        USD      1        1 #>  2:        US_      0        1 #>  3:        _SD      1        1 #>  4:        __D      1        0 #>  5:        _S_      0        1 #>  6:        USD      1        1 #>  7:        US_      0        1 #>  8:        _SD      1        1 #>  9:        __D      1        0 #> 10:        _S_      0        1  # dropping entries related to services that run on saturdaus AND sundays smaller_gtfs <- filter_by_weekday(   gtfs,   weekday = c(\"saturday\", \"sunday\"),   combine = \"and\",   keep = FALSE ) smaller_gtfs$calendar[, c(\"service_id\", \"sunday\", \"saturday\")] #>    service_id sunday saturday #>        <char>  <int>    <int> #> 1:        U__      0        0 #> 2:        US_      0        1 #> 3:        __D      1        0 #> 4:        _S_      0        1 #> 5:        U__      0        0 #> 6:        US_      0        1 #> 7:        __D      1        0 #> 8:        _S_      0        1  # dropping entries related to services than run EITHER on saturdays OR on # sundays smaller_gtfs <- filter_by_weekday(   gtfs,   weekday = c(\"sunday\", \"saturday\"),   combine = \"or\",   keep = FALSE ) smaller_gtfs$calendar[, c(\"service_id\", \"sunday\", \"saturday\")] #>    service_id sunday saturday #>        <char>  <int>    <int> #> 1:        U__      0        0 #> 2:        U__      0        0 smaller_gtfs <- filter_by_time_of_day(gtfs, from = \"05:00:00\", to = \"06:00:00\")  head(smaller_gtfs$frequencies) #>       trip_id start_time end_time headway_secs #>        <char>     <char>   <char>        <int> #> 1: CPTM L07-0   05:00:00 05:59:00          360 #> 2: CPTM L07-1   05:00:00 05:59:00          360 #> 3: CPTM L08-0   05:00:00 05:59:00          480 #> 4: CPTM L08-1   05:00:00 05:59:00          480 #> 5: CPTM L09-0   05:00:00 05:59:00          480 #> 6: CPTM L09-1   05:00:00 05:59:00          480  # stop_times entries are preserved because they should be interpreted as # \"templates\" head(smaller_gtfs$stop_times[, c(\"trip_id\", \"departure_time\", \"arrival_time\")]) #>       trip_id departure_time arrival_time #>        <char>         <char>       <char> #> 1: CPTM L07-0       04:00:00     04:00:00 #> 2: CPTM L07-0       04:08:00     04:08:00 #> 3: CPTM L07-0       04:16:00     04:16:00 #> 4: CPTM L07-0       04:24:00     04:24:00 #> 5: CPTM L07-0       04:32:00     04:32:00 #> 6: CPTM L07-0       04:40:00     04:40:00  # had the feed not had a frequencies table, the stop_times table would be # adjusted frequencies <- gtfs$frequencies gtfs$frequencies <- NULL smaller_gtfs <- filter_by_time_of_day(gtfs, from = \"05:00:00\", to = \"06:00:00\")  head(smaller_gtfs$stop_times[, c(\"trip_id\", \"departure_time\", \"arrival_time\")]) #>       trip_id departure_time arrival_time #>        <char>         <char>       <char> #> 1: CPTM L07-0       05:04:00     05:04:00 #> 2: CPTM L07-0       05:12:00     05:12:00 #> 3: CPTM L07-0       05:20:00     05:20:00 #> 4: CPTM L07-0       05:28:00     05:28:00 #> 5: CPTM L07-0       05:36:00     05:36:00 #> 6: CPTM L07-0       05:44:00     05:44:00 smaller_gtfs <- filter_by_time_of_day(     gtfs,     \"05:00:00\",     \"06:00:00\",     full_trips = TRUE )  # CPTM L07-0 trip is kept intact because it crosses the time block head(smaller_gtfs$stop_times[, c(\"trip_id\", \"departure_time\", \"arrival_time\")]) #>       trip_id departure_time arrival_time #>        <char>         <char>       <char> #> 1: CPTM L07-0       04:00:00     04:00:00 #> 2: CPTM L07-0       04:08:00     04:08:00 #> 3: CPTM L07-0       04:16:00     04:16:00 #> 4: CPTM L07-0       04:24:00     04:24:00 #> 5: CPTM L07-0       04:32:00     04:32:00 #> 6: CPTM L07-0       04:40:00     04:40:00  # dropping entries related to trips that cross the specified time block smaller_gtfs <- filter_by_time_of_day(     gtfs,     \"05:00:00\",     \"06:00:00\",     full_trips = TRUE,     keep = FALSE )  # CPTM L07-0 trip is gone head(smaller_gtfs$stop_times[, c(\"trip_id\", \"departure_time\", \"arrival_time\")]) #>       trip_id departure_time arrival_time #>        <char>         <char>       <char> #> 1: CPTM L09-0       04:00:00     04:00:00 #> 2: CPTM L09-0       04:03:00     04:03:00 #> 3: CPTM L09-0       04:06:00     04:06:00 #> 4: CPTM L09-0       04:09:00     04:09:00 #> 5: CPTM L09-0       04:12:00     04:12:00 #> 6: CPTM L09-0       04:15:00     04:15:00"},{"path":"https://ipeagit.github.io/gtfstools/dev/articles/filtering.html","id":"filtering-using-a-spatial-extent","dir":"Articles","previous_headings":"","what":"Filtering using a spatial extent","title":"Filtering GTFS feeds","text":"’s uncommon one wants analyze transit services smaller region contained inside feed. filter_by_sf() function allows filter GTFS data using given spatial extent. functions takes spatial sf/sfc object (bounding box) keeps/drops entries related shapes trips selected via specified spatial operation. may sound bit complicated, ’s fairly easy understand shown. Let’s create auxiliary function save us typing: function: Conditionally filters GTFS object given spatial object (called geom); Generates shapes’ trips’ geometries described respective tables; Generates polygon bounding box; Plots sf objects cited show effect filter_by_sf() argument final result. Also, please note plotter() function takes arguments filter_by_sf() (exception do_filter, used show unfiltered data), well defaults. Let’s say want filter GTFS data using bounding box shape 68962. ’s unfiltered data looks like, bounding box placed top .  default filter_by_sf() (plotter(), consequently) keeps data related trips shapes intersect given geometry. ’s looks like:  Alternatively can also drop data:  can also control spatial operation want use filter data. ’d keep data contained inside given geometry:  , simultaneously using spatial_operation keep, ’d drop data contained inside geometry:  filtering functions return GTFS object readily available manipulated analyzed using rest gtfstools’ toolkit. information use functions made available package, please see introductory vignette.","code":"plotter <- function(gtfs,                     geom,                     spatial_operation = sf::st_intersects,                     keep = TRUE,                     do_filter = TRUE) {   if (do_filter) {     gtfs <- filter_by_sf(gtfs, geom, spatial_operation, keep)   }    shapes <- convert_shapes_to_sf(gtfs)   trips <- get_trip_geometry(gtfs, file = \"stop_times\")   geom <- sf::st_as_sfc(geom)    ggplot() +     geom_sf(data = trips) +     geom_sf(data = shapes) +     geom_sf(data = geom, fill = NA) } bbox <- sf::st_bbox(convert_shapes_to_sf(gtfs, shape_id = \"68962\"))  plotter(gtfs, bbox, do_filter = FALSE) plotter(gtfs, bbox) #> Warning: `filter_by_sf()` was deprecated in gtfstools 1.3.0. #> ℹ Please use `filter_by_spatial_extent()` instead. #> ℹ For backwards compatibility reasons, usage of `filter_by_sf()` is still #>   allowed as of the current version, but the function will be removed from the #>   package in version 2.0.0. plotter(gtfs, bbox, keep = FALSE) #> Warning: `filter_by_sf()` was deprecated in gtfstools 1.3.0. #> ℹ Please use `filter_by_spatial_extent()` instead. #> ℹ For backwards compatibility reasons, usage of `filter_by_sf()` is still #>   allowed as of the current version, but the function will be removed from the #>   package in version 2.0.0. plotter(gtfs, bbox, spatial_operation = sf::st_contains) #> Warning: `filter_by_sf()` was deprecated in gtfstools 1.3.0. #> ℹ Please use `filter_by_spatial_extent()` instead. #> ℹ For backwards compatibility reasons, usage of `filter_by_sf()` is still #>   allowed as of the current version, but the function will be removed from the #>   package in version 2.0.0. plotter(gtfs, bbox, spatial_operation = sf::st_contains, keep = FALSE) #> Warning: `filter_by_sf()` was deprecated in gtfstools 1.3.0. #> ℹ Please use `filter_by_spatial_extent()` instead. #> ℹ For backwards compatibility reasons, usage of `filter_by_sf()` is still #>   allowed as of the current version, but the function will be removed from the #>   package in version 2.0.0."},{"path":"https://ipeagit.github.io/gtfstools/dev/articles/gtfstools.html","id":"gtfs-feeds","dir":"Articles","previous_headings":"","what":"GTFS feeds","title":"Introduction to gtfstools","text":"GTFS feeds exist two main different forms: GTFS static GTFS realtime. package allows manipulate GTFS static feeds, common variation. feeds collection many csv-like files (.txt extension) contained single .zip file. GTFS .zip file composed least five required files, may also contain conditionally required optional files: Required: agency.txt, stops.txt, routes.txt, trips.txt, stop_times.txt Conditionally required: calendar.txt, calendar_dates.txt, feed_info.txt Optional: fare_attributes.txt, fare_rules.txt, shapes.txt, frequencies.txt, transfers.txt, pathways.txt, levels.txt, translations.txt, attributions.txt Please check official GTFS reference details specification.","code":""},{"path":"https://ipeagit.github.io/gtfstools/dev/articles/gtfstools.html","id":"basic-usage","dir":"Articles","previous_headings":"","what":"Basic usage","title":"Introduction to gtfstools","text":"using gtfstools please make sure installed computer. can download either stable version CRAN… …development version GitHub. attach current R session: sample files included package: ggl_gtfs.zip manually built example GTFS feed provided Google. files samples licensed Creative Commons Attribution 4.0 License. spo_gtfs.zip subset São Paulo’s SPTrans feed, available . ber_gtfs.zip subset Berlin’s GTFS, available . poa_gtfs.zip subset Porto Alegre’s EPTC feed, available . Throughout demonstration using São Paulo’s Google’s feeds.","code":"install.packages(\"gtfstools\") install.packages(\"gtfstools\", repos = \"https://dhersz.r-universe.dev\")  # or # install.packages(\"remotes\") remotes::install_github(\"ipeaGIT/gtfstools\") library(gtfstools) data_path <- system.file(\"extdata\", package = \"gtfstools\") list.files(data_path) #> [1] \"ber_gtfs.zip\" \"ggl_gtfs.zip\" \"poa_gtfs.zip\" \"spo_gtfs.zip\""},{"path":"https://ipeagit.github.io/gtfstools/dev/articles/gtfstools.html","id":"read-feeds","dir":"Articles","previous_headings":"Basic usage","what":"Read feeds","title":"Introduction to gtfstools","text":"gtfstools reads feeds list data.tables, high-performance version base R’s data.frames. Thus, reading, writing manipulating GTFS objects created gtfstools easy fast even tables contain million rows. read feed use read_gtfs() function. default function reads .txt files contained main .zip file. may useful, however, read couple specific files, specially ’re dealing big data sets. , specify file want read files argument (without .txt extension): Please note date fields read columns class Date, instead kept integers (specified official reference), allowing easier data manipulation. columns converted back integers writing GTFS objects .zip file, GTFS files generated package always conform specification.","code":"spo_path <- file.path(data_path, \"spo_gtfs.zip\")  # default behaviour spo_gtfs <- read_gtfs(spo_path) names(spo_gtfs) #> [1] \"agency\"      \"calendar\"    \"frequencies\" \"routes\"      \"shapes\"      #> [6] \"stop_times\"  \"stops\"       \"trips\"  # only reads the 'shapes.txt' and 'trips.txt' files spo_shapes <- read_gtfs(spo_path, files = c(\"shapes\", \"trips\")) names(spo_shapes) #> [1] \"shapes\" \"trips\""},{"path":"https://ipeagit.github.io/gtfstools/dev/articles/gtfstools.html","id":"analyse-feeds","dir":"Articles","previous_headings":"Basic usage","what":"Analyse feeds","title":"Introduction to gtfstools","text":"gtfstools also includes functions prevent getting stuck repetitive tasks: get_trip_geometry() returns geometry trip GTFS object sf object (please check {sf} webpage details). GTFS data allows generate geometries using two different methods: either converting shapes described shapes.txt file sf, linking subsequent stops trip described stop_times.txt along straight line. former tends yield reliable higher resolution geometries, may useful compare results methods check trips described stop_times actually resemble actual shape:   get_trip_duration() returns duration trip GTFS object, specified stop_times file, temporal unit desire (either seconds, minutes, hours days): get_trip_segment_duration() similar function, even takes arguments, returns duration trip segment (.e. time interval two consecutive stops). quick example shows function may help diagnosing problems GTFS data: apparently every single trip spo_gtfs composed several equally long segments, looks unreasonable. Finally, get_trip_speed() helper around get_trip_geometry() get_trip_duration() returns average speed trip GTFS object:","code":"trip_geom <- get_trip_geometry(spo_gtfs, file = \"shapes\") plot(trip_geom$geometry) single_trip <- spo_gtfs$trips$trip_id[1] single_trip #> [1] \"CPTM L07-0\"  # 'file' argument defaults to c(\"shapes\", \"stop_times\") both_geom <- get_trip_geometry(spo_gtfs, trip_id = single_trip) plot(both_geom[\"origin_file\"]) trip_durtn <- get_trip_duration(spo_gtfs, unit = \"s\") head(trip_durtn) #> Key: <trip_id> #>      trip_id duration #>       <char>    <int> #> 1: 2002-10-0     2880 #> 2: 2105-10-0     6480 #> 3: 2105-10-1     6660 #> 4: 2161-10-0     5640 #> 5: 2161-10-1     5580 #> 6: 4491-10-0     4140  # 'unit' argument defaults to \"min\" single_durtn <- get_trip_duration(spo_gtfs, trip_id = single_trip) single_durtn #> Key: <trip_id> #>       trip_id duration #>        <char>    <num> #> 1: CPTM L07-0      136 trip_seg_durtn <- get_trip_segment_duration(spo_gtfs, unit = \"s\") head(trip_seg_durtn) #>       trip_id segment duration #>        <char>   <int>    <int> #> 1: CPTM L07-0       1      480 #> 2: CPTM L07-0       2      480 #> 3: CPTM L07-0       3      480 #> 4: CPTM L07-0       4      480 #> 5: CPTM L07-0       5      480 #> 6: CPTM L07-0       6      480  single_seg_durtn <- get_trip_segment_duration(spo_gtfs, trip_id = single_trip) head(single_seg_durtn) #>       trip_id segment duration #>        <char>   <int>    <num> #> 1: CPTM L07-0       1        8 #> 2: CPTM L07-0       2        8 #> 3: CPTM L07-0       3        8 #> 4: CPTM L07-0       4        8 #> 5: CPTM L07-0       5        8 #> 6: CPTM L07-0       6        8 trip_speed <- get_trip_speed(spo_gtfs, unit = \"m/s\") head(trip_speed) #>      trip_id origin_file    speed #>       <char>      <char>    <num> #> 1: 2002-10-0      shapes 2.486809 #> 2: 2105-10-0      shapes 2.848157 #> 3: 2105-10-1      shapes 2.720915 #> 4: 2161-10-0      shapes 3.106259 #> 5: 2161-10-1      shapes 3.273461 #> 6: 4491-10-0      shapes 3.667656  # 'unit' argument defaults to \"km/h\" single_trip_speed <- get_trip_speed(spo_gtfs, trip_id = single_trip) single_trip_speed #>       trip_id origin_file    speed #>        <char>      <char>    <num> #> 1: CPTM L07-0      shapes 26.78777"},{"path":"https://ipeagit.github.io/gtfstools/dev/articles/gtfstools.html","id":"manipulate-feeds","dir":"Articles","previous_headings":"Basic usage","what":"Manipulate feeds","title":"Introduction to gtfstools","text":"table inside GTFS object can easily manipulated using usual data.table syntax. data.table provides many useful features, updating columns reference, fast binary search, efficient data aggregation, many others, allowing deal large data sets efficiently. Please check official website details syntax usage. Just remember , since every GTFS object list data.tables, must refer table using $ operator. example, ’d remove headway_secs column frequencies file add afterwards: gtfstools also provides functions help getting common tasks. merge_gtfs() takes many GTFS objects combines row-wise. default function binds every table inside objects, can specify tables want merge files argument: set_trip_speed() sets average speed specified trips adjusting arrival_time departure_time columns stop_times table. Average speed calculated difference arrival time last stop minus departure time first top, divided trip’s length. Please note arrival departure times intermediate stops set \"\". transport routing software, OpenTripPlanner R5, support specifying stop times like , case interpolate arrival/departure times intermediate stops based trip’s average speed euclidean distance stops.","code":"old_headway_secs <- spo_gtfs$frequencies$headway_secs  spo_gtfs$frequencies[, headway_secs := NULL] head(spo_gtfs$frequencies) #>       trip_id start_time end_time #>        <char>     <char>   <char> #> 1: CPTM L07-0   04:00:00 04:59:00 #> 2: CPTM L07-0   05:00:00 05:59:00 #> 3: CPTM L07-0   06:00:00 06:59:00 #> 4: CPTM L07-0   07:00:00 07:59:00 #> 5: CPTM L07-0   08:00:00 08:59:00 #> 6: CPTM L07-0   09:00:00 09:59:00  spo_gtfs$frequencies[, headway_secs := old_headway_secs] head(spo_gtfs$frequencies) #>       trip_id start_time end_time headway_secs #>        <char>     <char>   <char>        <int> #> 1: CPTM L07-0   04:00:00 04:59:00          720 #> 2: CPTM L07-0   05:00:00 05:59:00          360 #> 3: CPTM L07-0   06:00:00 06:59:00          360 #> 4: CPTM L07-0   07:00:00 07:59:00          360 #> 5: CPTM L07-0   08:00:00 08:59:00          360 #> 6: CPTM L07-0   09:00:00 09:59:00          480 ggl_path <- file.path(data_path, \"ggl_gtfs.zip\") ggl_gtfs <- read_gtfs(ggl_path)  names(spo_gtfs) #> [1] \"agency\"      \"calendar\"    \"frequencies\" \"routes\"      \"shapes\"      #> [6] \"stop_times\"  \"stops\"       \"trips\" names(ggl_gtfs) #>  [1] \"calendar_dates\"  \"fare_attributes\" \"fare_rules\"      \"feed_info\"       #>  [5] \"frequencies\"     \"levels\"          \"pathways\"        \"routes\"          #>  [9] \"shapes\"          \"stop_times\"      \"stops\"           \"transfers\"       #> [13] \"translations\"    \"trips\"           \"agency\"          \"attributions\"    #> [17] \"calendar\"  merged_gtfs <- merge_gtfs(spo_gtfs, ggl_gtfs) names(merged_gtfs) #>  [1] \"agency\"          \"calendar\"        \"frequencies\"     \"routes\"          #>  [5] \"shapes\"          \"stop_times\"      \"stops\"           \"trips\"           #>  [9] \"calendar_dates\"  \"fare_attributes\" \"fare_rules\"      \"feed_info\"       #> [13] \"levels\"          \"pathways\"        \"transfers\"       \"translations\"    #> [17] \"attributions\"  # only merges the 'shapes' and 'trips' tables merged_files <- merge_gtfs(spo_gtfs, ggl_gtfs, files = c(\"shapes\", \"trips\")) names(merged_files) #> [1] \"shapes\" \"trips\" selected_trips <- c(\"2002-10-0\", \"CPTM L07-0\")  get_trip_speed(spo_gtfs, selected_trips, unit = \"km/h\") #>       trip_id origin_file     speed #>        <char>      <char>     <num> #> 1:  2002-10-0      shapes  8.952511 #> 2: CPTM L07-0      shapes 26.787768  # 'speed' is recycled to all trips if only a single value is given new_speed_gtfs <- set_trip_speed(spo_gtfs, selected_trips, 50) get_trip_speed(new_speed_gtfs, selected_trips) #>       trip_id origin_file    speed #>        <char>      <char>    <num> #> 1:  2002-10-0      shapes 50.06453 #> 2: CPTM L07-0      shapes 50.00874  # but you can also specify different speeds for each trip new_speed_gtfs <- set_trip_speed(spo_gtfs, selected_trips, c(30, 40)) get_trip_speed(new_speed_gtfs, selected_trips) #>       trip_id origin_file    speed #>        <char>      <char>    <num> #> 1:  2002-10-0      shapes 30.01541 #> 2: CPTM L07-0      shapes 40.00516"},{"path":"https://ipeagit.github.io/gtfstools/dev/articles/gtfstools.html","id":"write-feeds","dir":"Articles","previous_headings":"Basic usage","what":"Write feeds","title":"Introduction to gtfstools","text":"Finally, write_gtfs() allows save GTFS objects disk. defaults writing every single table inside object .txt file, can conditionally exclude files wish: write_gtfs() also converts Date columns back integer, producing GTFS files conform official specification.","code":"temp_dir <- file.path(tempdir(), \"gttools_vig\") dir.create(temp_dir) list.files(temp_dir) #> character(0)  filename <- file.path(temp_dir, \"spo_gtfs.zip\")  write_gtfs(spo_gtfs, filename) list.files(temp_dir) #> [1] \"spo_gtfs.zip\" zip::zip_list(filename)$filename #> [1] \"agency.txt\"      \"calendar.txt\"    \"frequencies.txt\" \"routes.txt\"      #> [5] \"shapes.txt\"      \"stop_times.txt\"  \"stops.txt\"       \"trips.txt\"  write_gtfs(spo_gtfs, filename, files = c(\"stop_times\", \"trips\", \"calendar\")) zip::zip_list(filename)$filename #> [1] \"stop_times.txt\" \"trips.txt\"      \"calendar.txt\""},{"path":"https://ipeagit.github.io/gtfstools/dev/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Daniel Herszenhut. Author, maintainer. Rafael H. M. Pereira. Author. Pedro R. Andrade. Author. Joao Bazzo. Author. Mark Padgham. Contributor. Marcus Saraiva. Contributor. Ipea - Institute Applied Economic Research. Copyright holder, funder.","code":""},{"path":"https://ipeagit.github.io/gtfstools/dev/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Herszenhut D, Pereira R, Andrade P, Bazzo J (2025). gtfstools: General Transit Feed Specification (GTFS) Editing Analysing Tools. R package version 1.4.0.9000, https://github.com/ipeaGIT/gtfstools, https://ipeagit.github.io/gtfstools/.","code":"@Manual{,   title = {gtfstools: General Transit Feed Specification (GTFS) Editing and Analysing Tools},   author = {Daniel Herszenhut and Rafael H. M. Pereira and Pedro R. Andrade and Joao Bazzo},   year = {2025},   note = {R package version 1.4.0.9000,     https://github.com/ipeaGIT/gtfstools},   url = {https://ipeagit.github.io/gtfstools/}, }"},{"path":"https://ipeagit.github.io/gtfstools/dev/index.html","id":"gtfstools-","dir":"","previous_headings":"","what":"General Transit Feed Specification (GTFS) Editing and Analysing Tools","title":"General Transit Feed Specification (GTFS) Editing and Analysing Tools","text":"gtfstools offers set convenient tools editing analysing transit feeds GTFS format. Feeds read list data.tables, allowing easy fast data manipulation. Many package’s features based functions packages, especially {tidytransit} {gtfs2gps}.","code":""},{"path":"https://ipeagit.github.io/gtfstools/dev/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"General Transit Feed Specification (GTFS) Editing and Analysing Tools","text":"Stable version: Development version: package requires working installation {sf}. Please check link information install .","code":"install.packages(\"gtfstools\") # either install.packages(\"gtfstools\", repos = \"https://dhersz.r-universe.dev\")  # or # install.packages(\"remotes\") remotes::install_github(\"ipeaGIT/gtfstools\")"},{"path":"https://ipeagit.github.io/gtfstools/dev/index.html","id":"usage","dir":"","previous_headings":"","what":"Usage","title":"General Transit Feed Specification (GTFS) Editing and Analysing Tools","text":"Please read gtfstools vignettes package usage: Basic usage: reading, analysing, manipulating writing feeds. Run vignette(\"gtfstools\") check website (Introduction gtfstools). Filtering GTFS feeds. Run vignette(\"filtering\", package = \"gtfstools\") check website (Filtering GTFS feeds). Validating GTFS feeds. Run vignette(\"validating\", package = \"gtfstools\") check website (Validating GTFS feeds).","code":""},{"path":"https://ipeagit.github.io/gtfstools/dev/index.html","id":"related-packages","dir":"","previous_headings":"","what":"Related packages","title":"General Transit Feed Specification (GTFS) Editing and Analysing Tools","text":"{tidytransit} {gtfs2gps} {gtfsrouter}","code":""},{"path":"https://ipeagit.github.io/gtfstools/dev/index.html","id":"acknowledgement-","dir":"","previous_headings":"","what":"Acknowledgement","title":"General Transit Feed Specification (GTFS) Editing and Analysing Tools","text":"gtfstools developed team Institute Applied Economic Research (Ipea), Brazil.","code":""},{"path":"https://ipeagit.github.io/gtfstools/dev/reference/as_dt_gtfs.html","id":null,"dir":"Reference","previous_headings":"","what":"Coerce lists and GTFS objects from other packages into gtfstools-compatible GTFS objects — as_dt_gtfs","title":"Coerce lists and GTFS objects from other packages into gtfstools-compatible GTFS objects — as_dt_gtfs","text":"Coerces existing object, list GTFS object created packages ({tidytransit} {gtfsio}, example) gtfstools-compatible GTFS object - .e. one whose internal tables represented data.tables whose fields formatted like fields feed read read_gtfs(). as_dt_gtfs() S3 generic, methods : tidygtfs: class GTFS objects read tidytransit::read_gtfs(). method converts tibbles data.tables convert time columns, represented hms objects tidygtfs, strings \"HH:MM:SS\" format. gtfs: class GTFS objects read gtfsio::import_gtfs(). method convert date fields, represented integers {gtfsio}'s representation, Date objects. list: method tries convert elements list data.tables. Please note list elements must inherit data.frame must named. method try convert fields representation used {gtfstools}, information formatted first place.","code":""},{"path":"https://ipeagit.github.io/gtfstools/dev/reference/as_dt_gtfs.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Coerce lists and GTFS objects from other packages into gtfstools-compatible GTFS objects — as_dt_gtfs","text":"","code":"as_dt_gtfs(gtfs, ...)  # S3 method for class 'tidygtfs' as_dt_gtfs(gtfs, calculate_distance = TRUE, ...)  # S3 method for class 'gtfs' as_dt_gtfs(gtfs, ...)  # S3 method for class 'list' as_dt_gtfs(gtfs, ...)"},{"path":"https://ipeagit.github.io/gtfstools/dev/reference/as_dt_gtfs.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Coerce lists and GTFS objects from other packages into gtfstools-compatible GTFS objects — as_dt_gtfs","text":"gtfs object coerced dt_gtfs. ... Ignored. calculate_distance logical. Passed convert_sf_to_shapes(), affects output object converted includes shapes element. Controls whether function, used convert LINESTRING sf GTFS shapes table, calculate populate shape_dist_traveled column. column used describe distance along shape one points first point. Defaults TRUE.","code":""},{"path":"https://ipeagit.github.io/gtfstools/dev/reference/as_dt_gtfs.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Coerce lists and GTFS objects from other packages into gtfstools-compatible GTFS objects — as_dt_gtfs","text":"dt_gtfs GTFS object.","code":""},{"path":"https://ipeagit.github.io/gtfstools/dev/reference/as_dt_gtfs.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Coerce lists and GTFS objects from other packages into gtfstools-compatible GTFS objects — as_dt_gtfs","text":"","code":"data_path <- system.file(\"extdata/spo_gtfs.zip\", package = \"gtfstools\")  gtfsio_gtfs <- gtfsio::import_gtfs(data_path) class(gtfsio_gtfs) #> [1] \"gtfs\" \"list\"  gtfstools_gtfs <- as_dt_gtfs(gtfsio_gtfs) class(gtfstools_gtfs) #> [1] \"dt_gtfs\" \"gtfs\"    \"list\"     gtfs_like_list <- unclass(gtfsio_gtfs) class(gtfs_like_list) #> [1] \"list\"  gtfstools_gtfs <- as_dt_gtfs(gtfs_like_list) class(gtfstools_gtfs) #> [1] \"dt_gtfs\" \"gtfs\"    \"list\""},{"path":"https://ipeagit.github.io/gtfstools/dev/reference/convert_from_standard.html","id":null,"dir":"Reference","previous_headings":"","what":"Convert a standards-compliant GTFS into a gtfstools' GTFS — convert_from_standard","title":"Convert a standards-compliant GTFS into a gtfstools' GTFS — convert_from_standard","text":"Converts standards-compliant GTFS gtfstools' GTFS (.e. one date fields Date objects, integers).","code":""},{"path":"https://ipeagit.github.io/gtfstools/dev/reference/convert_from_standard.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Convert a standards-compliant GTFS into a gtfstools' GTFS — convert_from_standard","text":"","code":"convert_from_standard(gtfs)"},{"path":"https://ipeagit.github.io/gtfstools/dev/reference/convert_from_standard.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Convert a standards-compliant GTFS into a gtfstools' GTFS — convert_from_standard","text":"gtfs GTFS object, created read_gtfs().","code":""},{"path":"https://ipeagit.github.io/gtfstools/dev/reference/convert_from_standard.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Convert a standards-compliant GTFS into a gtfstools' GTFS — convert_from_standard","text":"GTFS object passed gtfs parameter, converting relevant fields.","code":""},{"path":"https://ipeagit.github.io/gtfstools/dev/reference/convert_sf_to_shapes.html","id":null,"dir":"Reference","previous_headings":"","what":"Convert a simple feature object into a shapes table — convert_sf_to_shapes","title":"Convert a simple feature object into a shapes table — convert_sf_to_shapes","text":"Converts LINESTRING sf object GTFS shapes table.","code":""},{"path":"https://ipeagit.github.io/gtfstools/dev/reference/convert_sf_to_shapes.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Convert a simple feature object into a shapes table — convert_sf_to_shapes","text":"","code":"convert_sf_to_shapes(sf_shapes, shape_id = NULL, calculate_distance = TRUE)"},{"path":"https://ipeagit.github.io/gtfstools/dev/reference/convert_sf_to_shapes.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Convert a simple feature object into a shapes table — convert_sf_to_shapes","text":"sf_shapes LINESTRING sf associating shape_ids geometry. object must use CRS WGS 84 (EPSG code 4326). shape_id character vector specifying shape_ids converted. NULL (default), shapes converted. calculate_distance logical. Whether calculate populate shape_dist_traveled column. column used describe distance along shape one points first point. Defaults TRUE.","code":""},{"path":"https://ipeagit.github.io/gtfstools/dev/reference/convert_sf_to_shapes.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Convert a simple feature object into a shapes table — convert_sf_to_shapes","text":"data.table representing GTFS shapes table.","code":""},{"path":"https://ipeagit.github.io/gtfstools/dev/reference/convert_sf_to_shapes.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Convert a simple feature object into a shapes table — convert_sf_to_shapes","text":"","code":"data_path <- system.file(\"extdata/spo_gtfs.zip\", package = \"gtfstools\") gtfs <- read_gtfs(data_path)  # first converting existing shapes table into a sf object shapes_sf <- convert_shapes_to_sf(gtfs) head(shapes_sf) #> Simple feature collection with 6 features and 1 field #> Geometry type: LINESTRING #> Dimension:     XY #> Bounding box:  xmin: -46.98404 ymin: -23.73644 xmax: -46.63535 ymax: -23.19474 #> Geodetic CRS:  WGS 84 #>   shape_id                       geometry #> 1    17846 LINESTRING (-46.63535 -23.5... #> 2    17847 LINESTRING (-46.87255 -23.1... #> 3    17848 LINESTRING (-46.64073 -23.5... #> 4    17849 LINESTRING (-46.98404 -23.5... #> 5    17850 LINESTRING (-46.77604 -23.5... #> 6    17851 LINESTRING (-46.69711 -23.7...  # by default converts all shapes result <- convert_sf_to_shapes(shapes_sf) result #>        shape_id shape_dist_traveled shape_pt_lon shape_pt_lat shape_pt_sequence #>          <char>               <num>        <num>        <num>             <int> #>     1:    17846             0.00000    -46.63535    -23.53517                 1 #>     2:    17846            13.55178    -46.63548    -23.53513                 2 #>     3:    17846            95.86978    -46.63626    -23.53494                 3 #>     4:    17846           184.81732    -46.63710    -23.53473                 4 #>     5:    17846           211.17349    -46.63735    -23.53466                 5 #>    ---                                                                          #> 12291:    68962         26058.05526    -46.64066    -23.54921               628 #> 12292:    68962         26067.76199    -46.64057    -23.54922               629 #> 12293:    68962         26094.30002    -46.64033    -23.54913               630 #> 12294:    68962         26132.70120    -46.63995    -23.54910               631 #> 12295:    68962         26162.11007    -46.63967    -23.54907               632  # shape_id argument controls which shapes are converted result <- convert_sf_to_shapes(shapes_sf, shape_id = c(\"17846\", \"17847\")) result #>       shape_id shape_dist_traveled shape_pt_lon shape_pt_lat shape_pt_sequence #>         <char>               <num>        <num>        <num>             <int> #>    1:    17846             0.00000    -46.63535    -23.53517                 1 #>    2:    17846            13.55178    -46.63548    -23.53513                 2 #>    3:    17846            95.86978    -46.63626    -23.53494                 3 #>    4:    17846           184.81732    -46.63710    -23.53473                 4 #>    5:    17846           211.17349    -46.63735    -23.53466                 5 #>   ---                                                                          #> 1090:    17847         60507.76810    -46.63735    -23.53466               543 #> 1091:    17847         60534.12426    -46.63710    -23.53473               544 #> 1092:    17847         60623.07180    -46.63626    -23.53494               545 #> 1093:    17847         60705.38981    -46.63548    -23.53513               546 #> 1094:    17847         60718.94158    -46.63535    -23.53517               547  # calculate_distance argument controls whether to calculate # shape_dist_traveled or not result <- convert_sf_to_shapes(shapes_sf, calculate_distance = TRUE) result #>        shape_id shape_dist_traveled shape_pt_lon shape_pt_lat shape_pt_sequence #>          <char>               <num>        <num>        <num>             <int> #>     1:    17846             0.00000    -46.63535    -23.53517                 1 #>     2:    17846            13.55178    -46.63548    -23.53513                 2 #>     3:    17846            95.86978    -46.63626    -23.53494                 3 #>     4:    17846           184.81732    -46.63710    -23.53473                 4 #>     5:    17846           211.17349    -46.63735    -23.53466                 5 #>    ---                                                                          #> 12291:    68962         26058.05526    -46.64066    -23.54921               628 #> 12292:    68962         26067.76199    -46.64057    -23.54922               629 #> 12293:    68962         26094.30002    -46.64033    -23.54913               630 #> 12294:    68962         26132.70120    -46.63995    -23.54910               631 #> 12295:    68962         26162.11007    -46.63967    -23.54907               632"},{"path":"https://ipeagit.github.io/gtfstools/dev/reference/convert_shapes_to_sf.html","id":null,"dir":"Reference","previous_headings":"","what":"Convert shapes table to simple feature object — convert_shapes_to_sf","title":"Convert shapes table to simple feature object — convert_shapes_to_sf","text":"Converts shapes table LINESTRING sf object.","code":""},{"path":"https://ipeagit.github.io/gtfstools/dev/reference/convert_shapes_to_sf.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Convert shapes table to simple feature object — convert_shapes_to_sf","text":"","code":"convert_shapes_to_sf(gtfs, shape_id = NULL, crs = 4326, sort_sequence = FALSE)"},{"path":"https://ipeagit.github.io/gtfstools/dev/reference/convert_shapes_to_sf.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Convert shapes table to simple feature object — convert_shapes_to_sf","text":"gtfs GTFS object, created read_gtfs(). shape_id character vector including shape_ids converted. NULL (default), shapes converted. crs CRS resulting object, either EPSG code crs object. Defaults 4326 (WGS 84). sort_sequence logical. Whether sort shapes shape_pt_sequence. Defaults FALSE, otherwise spec-compliant feeds, shape points already ordered shape_pt_sequence, penalized longer processing times. Shapes generated unordered sequences correctly depict real life trip shapes.","code":""},{"path":"https://ipeagit.github.io/gtfstools/dev/reference/convert_shapes_to_sf.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Convert shapes table to simple feature object — convert_shapes_to_sf","text":"LINESTRING sf object.","code":""},{"path":"https://ipeagit.github.io/gtfstools/dev/reference/convert_shapes_to_sf.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Convert shapes table to simple feature object — convert_shapes_to_sf","text":"","code":"# read gtfs data_path <- system.file(\"extdata/spo_gtfs.zip\", package = \"gtfstools\") gtfs <- read_gtfs(data_path)  shapes_sf <- convert_shapes_to_sf(gtfs) head(shapes_sf) #> Simple feature collection with 6 features and 1 field #> Geometry type: LINESTRING #> Dimension:     XY #> Bounding box:  xmin: -46.98404 ymin: -23.73644 xmax: -46.63535 ymax: -23.19474 #> Geodetic CRS:  WGS 84 #>   shape_id                       geometry #> 1    17846 LINESTRING (-46.63535 -23.5... #> 2    17847 LINESTRING (-46.87255 -23.1... #> 3    17848 LINESTRING (-46.64073 -23.5... #> 4    17849 LINESTRING (-46.98404 -23.5... #> 5    17850 LINESTRING (-46.77604 -23.5... #> 6    17851 LINESTRING (-46.69711 -23.7...  shapes_sf <- convert_shapes_to_sf(gtfs, shape_id = \"17846\") shapes_sf #> Simple feature collection with 1 feature and 1 field #> Geometry type: LINESTRING #> Dimension:     XY #> Bounding box:  xmin: -46.87255 ymin: -23.53517 xmax: -46.63535 ymax: -23.19474 #> Geodetic CRS:  WGS 84 #>   shape_id                       geometry #> 1    17846 LINESTRING (-46.63535 -23.5..."},{"path":"https://ipeagit.github.io/gtfstools/dev/reference/convert_stops_to_sf.html","id":null,"dir":"Reference","previous_headings":"","what":"Convert stops table to simple feature object — convert_stops_to_sf","title":"Convert stops table to simple feature object — convert_stops_to_sf","text":"Converts stops table POINT sf object.","code":""},{"path":"https://ipeagit.github.io/gtfstools/dev/reference/convert_stops_to_sf.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Convert stops table to simple feature object — convert_stops_to_sf","text":"","code":"convert_stops_to_sf(gtfs, stop_id = NULL, crs = 4326)"},{"path":"https://ipeagit.github.io/gtfstools/dev/reference/convert_stops_to_sf.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Convert stops table to simple feature object — convert_stops_to_sf","text":"gtfs GTFS object, created read_gtfs(). stop_id character vector including stop_ids converted. NULL (default), stops converted. crs CRS resulting object, either EPSG code crs object. Defaults 4326 (WGS 84).","code":""},{"path":"https://ipeagit.github.io/gtfstools/dev/reference/convert_stops_to_sf.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Convert stops table to simple feature object — convert_stops_to_sf","text":"POINT sf object.","code":""},{"path":"https://ipeagit.github.io/gtfstools/dev/reference/convert_stops_to_sf.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Convert stops table to simple feature object — convert_stops_to_sf","text":"","code":"# read gtfs data_path <- system.file(\"extdata/spo_gtfs.zip\", package = \"gtfstools\") gtfs <- read_gtfs(data_path)  stops_sf <- convert_stops_to_sf(gtfs) head(stops_sf) #> Simple feature collection with 6 features and 3 fields #> Geometry type: POINT #> Dimension:     XY #> Bounding box:  xmin: -46.69114 ymin: -23.646 xmax: -46.64094 ymax: -23.5465 #> Geodetic CRS:  WGS 84 #>   stop_id     stop_name stop_desc                    geometry #> 1   18848      Clínicas           POINT (-46.67111 -23.55402) #> 2   18849 Vila Madalena            POINT (-46.69114 -23.5465) #> 3   18850    Consolação            POINT (-46.6602 -23.55809) #> 4   18851     Conceição           POINT (-46.64124 -23.63504) #> 5   18852     Jabaquara             POINT (-46.64103 -23.646) #> 6   18853     São Judas           POINT (-46.64094 -23.62588)  stops_sf <- convert_stops_to_sf(gtfs, stop_id = \"18848\") stops_sf #> Simple feature collection with 1 feature and 3 fields #> Geometry type: POINT #> Dimension:     XY #> Bounding box:  xmin: -46.67111 ymin: -23.55402 xmax: -46.67111 ymax: -23.55402 #> Geodetic CRS:  WGS 84 #>   stop_id stop_name stop_desc                    geometry #> 1   18848  Clínicas           POINT (-46.67111 -23.55402)"},{"path":"https://ipeagit.github.io/gtfstools/dev/reference/convert_time_to_seconds.html","id":null,"dir":"Reference","previous_headings":"","what":"Convert time fields to seconds after midnight — convert_time_to_seconds","title":"Convert time fields to seconds after midnight — convert_time_to_seconds","text":"Converts stop_times' frequencies' fields \"HH:MM:SS\" format seconds midnight. Instead overwritting existing fields, creates new fields _secs suffix.","code":""},{"path":"https://ipeagit.github.io/gtfstools/dev/reference/convert_time_to_seconds.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Convert time fields to seconds after midnight — convert_time_to_seconds","text":"","code":"convert_time_to_seconds(gtfs, file = NULL, by_reference = FALSE)"},{"path":"https://ipeagit.github.io/gtfstools/dev/reference/convert_time_to_seconds.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Convert time fields to seconds after midnight — convert_time_to_seconds","text":"gtfs GTFS object, created read_gtfs(). file character vector, specifying file whose fields converted. NULL (default), function attempts convert times files, raises error none exist. by_reference Whether update tables reference. Defaults FALSE.","code":""},{"path":"https://ipeagit.github.io/gtfstools/dev/reference/convert_time_to_seconds.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Convert time fields to seconds after midnight — convert_time_to_seconds","text":"by_reference FALSE, returns GTFS object additional time seconds columns (identified _secs suffix). Else, returns GTFS object invisibly (please note case original GTFS object altered).","code":""},{"path":"https://ipeagit.github.io/gtfstools/dev/reference/convert_time_to_seconds.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Convert time fields to seconds after midnight — convert_time_to_seconds","text":"","code":"data_path <- system.file(\"extdata/spo_gtfs.zip\", package = \"gtfstools\")  gtfs <- read_gtfs(data_path)  # by default converts both 'stop_times' and 'frequencies' times converted_gtfs <- convert_time_to_seconds(gtfs) head(converted_gtfs$stop_times) #>       trip_id arrival_time departure_time stop_id stop_sequence #>        <char>       <char>         <char>  <char>         <int> #> 1: CPTM L07-0     04:00:00       04:00:00   18940             1 #> 2: CPTM L07-0     04:08:00       04:08:00   18920             2 #> 3: CPTM L07-0     04:16:00       04:16:00   18919             3 #> 4: CPTM L07-0     04:24:00       04:24:00   18917             4 #> 5: CPTM L07-0     04:32:00       04:32:00   18916             5 #> 6: CPTM L07-0     04:40:00       04:40:00   18965             6 #>    departure_time_secs arrival_time_secs #>                  <int>             <int> #> 1:               14400             14400 #> 2:               14880             14880 #> 3:               15360             15360 #> 4:               15840             15840 #> 5:               16320             16320 #> 6:               16800             16800 head(converted_gtfs$frequencies) #>       trip_id start_time end_time headway_secs start_time_secs end_time_secs #>        <char>     <char>   <char>        <int>           <int>         <int> #> 1: CPTM L07-0   04:00:00 04:59:00          720           14400         17940 #> 2: CPTM L07-0   05:00:00 05:59:00          360           18000         21540 #> 3: CPTM L07-0   06:00:00 06:59:00          360           21600         25140 #> 4: CPTM L07-0   07:00:00 07:59:00          360           25200         28740 #> 5: CPTM L07-0   08:00:00 08:59:00          360           28800         32340 #> 6: CPTM L07-0   09:00:00 09:59:00          480           32400         35940  # choose which table to convert with 'file' converted_gtfs <- convert_time_to_seconds(gtfs, file = \"frequencies\") head(converted_gtfs$stop_times) #>       trip_id arrival_time departure_time stop_id stop_sequence #>        <char>       <char>         <char>  <char>         <int> #> 1: CPTM L07-0     04:00:00       04:00:00   18940             1 #> 2: CPTM L07-0     04:08:00       04:08:00   18920             2 #> 3: CPTM L07-0     04:16:00       04:16:00   18919             3 #> 4: CPTM L07-0     04:24:00       04:24:00   18917             4 #> 5: CPTM L07-0     04:32:00       04:32:00   18916             5 #> 6: CPTM L07-0     04:40:00       04:40:00   18965             6 head(converted_gtfs$frequencies) #>       trip_id start_time end_time headway_secs start_time_secs end_time_secs #>        <char>     <char>   <char>        <int>           <int>         <int> #> 1: CPTM L07-0   04:00:00 04:59:00          720           14400         17940 #> 2: CPTM L07-0   05:00:00 05:59:00          360           18000         21540 #> 3: CPTM L07-0   06:00:00 06:59:00          360           21600         25140 #> 4: CPTM L07-0   07:00:00 07:59:00          360           25200         28740 #> 5: CPTM L07-0   08:00:00 08:59:00          360           28800         32340 #> 6: CPTM L07-0   09:00:00 09:59:00          480           32400         35940  # original gtfs remained unchanged, as seen with the frequencies table above # change original object without creating a copy with 'by_reference = TRUE' convert_time_to_seconds(gtfs, by_reference = TRUE) head(gtfs$stop_times) #>       trip_id arrival_time departure_time stop_id stop_sequence #>        <char>       <char>         <char>  <char>         <int> #> 1: CPTM L07-0     04:00:00       04:00:00   18940             1 #> 2: CPTM L07-0     04:08:00       04:08:00   18920             2 #> 3: CPTM L07-0     04:16:00       04:16:00   18919             3 #> 4: CPTM L07-0     04:24:00       04:24:00   18917             4 #> 5: CPTM L07-0     04:32:00       04:32:00   18916             5 #> 6: CPTM L07-0     04:40:00       04:40:00   18965             6 #>    departure_time_secs arrival_time_secs #>                  <int>             <int> #> 1:               14400             14400 #> 2:               14880             14880 #> 3:               15360             15360 #> 4:               15840             15840 #> 5:               16320             16320 #> 6:               16800             16800 head(gtfs$frequencies) #>       trip_id start_time end_time headway_secs start_time_secs end_time_secs #>        <char>     <char>   <char>        <int>           <int>         <int> #> 1: CPTM L07-0   04:00:00 04:59:00          720           14400         17940 #> 2: CPTM L07-0   05:00:00 05:59:00          360           18000         21540 #> 3: CPTM L07-0   06:00:00 06:59:00          360           21600         25140 #> 4: CPTM L07-0   07:00:00 07:59:00          360           25200         28740 #> 5: CPTM L07-0   08:00:00 08:59:00          360           28800         32340 #> 6: CPTM L07-0   09:00:00 09:59:00          480           32400         35940"},{"path":"https://ipeagit.github.io/gtfstools/dev/reference/convert_to_standard.html","id":null,"dir":"Reference","previous_headings":"","what":"Convert a gtfstools' GTFS into a standards-compliant GTFS — convert_to_standard","title":"Convert a gtfstools' GTFS into a standards-compliant GTFS — convert_to_standard","text":"Converts gtfstools' GTFS standards-compliant GTFS (.e. date fields converted Date integer).","code":""},{"path":"https://ipeagit.github.io/gtfstools/dev/reference/convert_to_standard.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Convert a gtfstools' GTFS into a standards-compliant GTFS — convert_to_standard","text":"","code":"convert_to_standard(gtfs)"},{"path":"https://ipeagit.github.io/gtfstools/dev/reference/convert_to_standard.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Convert a gtfstools' GTFS into a standards-compliant GTFS — convert_to_standard","text":"gtfs GTFS object, created read_gtfs().","code":""},{"path":"https://ipeagit.github.io/gtfstools/dev/reference/convert_to_standard.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Convert a gtfstools' GTFS into a standards-compliant GTFS — convert_to_standard","text":"GTFS object passed gtfs parameter, converting relevant fields.","code":""},{"path":"https://ipeagit.github.io/gtfstools/dev/reference/copy_gtfs_diff_field_class.html","id":null,"dir":"Reference","previous_headings":"","what":"Make a GTFS copy with a field of a different class — copy_gtfs_diff_field_class","title":"Make a GTFS copy with a field of a different class — copy_gtfs_diff_field_class","text":"Creates copy GTFS object changing class given field. Used testing.","code":""},{"path":"https://ipeagit.github.io/gtfstools/dev/reference/copy_gtfs_diff_field_class.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Make a GTFS copy with a field of a different class — copy_gtfs_diff_field_class","text":"","code":"copy_gtfs_diff_field_class(gtfs, file, field, class)"},{"path":"https://ipeagit.github.io/gtfstools/dev/reference/copy_gtfs_diff_field_class.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Make a GTFS copy with a field of a different class — copy_gtfs_diff_field_class","text":"gtfs GTFS object, created read_gtfs(). file File whose field must class changed. field Field class changed. class desired class.","code":""},{"path":"https://ipeagit.github.io/gtfstools/dev/reference/copy_gtfs_diff_field_class.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Make a GTFS copy with a field of a different class — copy_gtfs_diff_field_class","text":"GTFS object field desired class.","code":""},{"path":"https://ipeagit.github.io/gtfstools/dev/reference/copy_gtfs_without_field.html","id":null,"dir":"Reference","previous_headings":"","what":"Make a GTFS copy without a given field from a given file — copy_gtfs_without_field","title":"Make a GTFS copy without a given field from a given file — copy_gtfs_without_field","text":"Creates copy GTFS object without given field given file. Used testing.","code":""},{"path":"https://ipeagit.github.io/gtfstools/dev/reference/copy_gtfs_without_field.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Make a GTFS copy without a given field from a given file — copy_gtfs_without_field","text":"","code":"copy_gtfs_without_field(gtfs, file, field)"},{"path":"https://ipeagit.github.io/gtfstools/dev/reference/copy_gtfs_without_field.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Make a GTFS copy without a given field from a given file — copy_gtfs_without_field","text":"gtfs GTFS object, created read_gtfs(). file File field must removed. field Field removed.","code":""},{"path":"https://ipeagit.github.io/gtfstools/dev/reference/copy_gtfs_without_field.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Make a GTFS copy without a given field from a given file — copy_gtfs_without_field","text":"GTFS object without given field.","code":""},{"path":"https://ipeagit.github.io/gtfstools/dev/reference/copy_gtfs_without_file.html","id":null,"dir":"Reference","previous_headings":"","what":"Make a GTFS copy without a given file — copy_gtfs_without_file","title":"Make a GTFS copy without a given file — copy_gtfs_without_file","text":"Creates copy GTFS object without given file. Used testing.","code":""},{"path":"https://ipeagit.github.io/gtfstools/dev/reference/copy_gtfs_without_file.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Make a GTFS copy without a given file — copy_gtfs_without_file","text":"","code":"copy_gtfs_without_file(gtfs, file)"},{"path":"https://ipeagit.github.io/gtfstools/dev/reference/copy_gtfs_without_file.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Make a GTFS copy without a given file — copy_gtfs_without_file","text":"gtfs GTFS object, created read_gtfs(). file File removed.","code":""},{"path":"https://ipeagit.github.io/gtfstools/dev/reference/copy_gtfs_without_file.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Make a GTFS copy without a given file — copy_gtfs_without_file","text":"GTFS object without given file.","code":""},{"path":"https://ipeagit.github.io/gtfstools/dev/reference/date_to_integer.html","id":null,"dir":"Reference","previous_headings":"","what":"Convert a Date vector into an integer vector — date_to_integer","title":"Convert a Date vector into an integer vector — date_to_integer","text":"Convert Date vector integer vector","code":""},{"path":"https://ipeagit.github.io/gtfstools/dev/reference/date_to_integer.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Convert a Date vector into an integer vector — date_to_integer","text":"","code":"date_to_integer(field)"},{"path":"https://ipeagit.github.io/gtfstools/dev/reference/download_validator.html","id":null,"dir":"Reference","previous_headings":"","what":"Download MobilityData's GTFS validator — download_validator","title":"Download MobilityData's GTFS validator — download_validator","text":"Downloads MobilityData's command line tool validate GTFS feeds.","code":""},{"path":"https://ipeagit.github.io/gtfstools/dev/reference/download_validator.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Download MobilityData's GTFS validator — download_validator","text":"","code":"download_validator(path, version = \"latest\", force = FALSE, quiet = TRUE)"},{"path":"https://ipeagit.github.io/gtfstools/dev/reference/download_validator.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Download MobilityData's GTFS validator — download_validator","text":"path string. directory validator saved . version string. version validator downloaded. Defaults \"latest\", accepts version numbers strings (.e. download version v6.0.0 please enter \"6.0.0\"). Please check MobilityData/gtfs-validator releases full set available versions. force logical. Whether overwrite previously downloaded validator path. Defaults FALSE. quiet logical. Whether hide log messages progress bars. Defaults TRUE.","code":""},{"path":"https://ipeagit.github.io/gtfstools/dev/reference/download_validator.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Download MobilityData's GTFS validator — download_validator","text":"Invisibly returns normalized path downloaded validator.","code":""},{"path":[]},{"path":"https://ipeagit.github.io/gtfstools/dev/reference/download_validator.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Download MobilityData's GTFS validator — download_validator","text":"","code":"path <- tempdir()  download_validator(path)  # specifying a specific version download_validator(path, version = \"6.0.0\")"},{"path":"https://ipeagit.github.io/gtfstools/dev/reference/filter_by_agency_id.html","id":null,"dir":"Reference","previous_headings":"","what":"Filter GTFS object by agency_id — filter_by_agency_id","title":"Filter GTFS object by agency_id — filter_by_agency_id","text":"Filters GTFS object agency_ids, keeping (dropping) relevant entries file.","code":""},{"path":"https://ipeagit.github.io/gtfstools/dev/reference/filter_by_agency_id.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Filter GTFS object by agency_id — filter_by_agency_id","text":"","code":"filter_by_agency_id(gtfs, agency_id, keep = TRUE)"},{"path":"https://ipeagit.github.io/gtfstools/dev/reference/filter_by_agency_id.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Filter GTFS object by agency_id — filter_by_agency_id","text":"gtfs GTFS object, created read_gtfs(). agency_id character vector. agency_ids used filter data. keep logical. Whether entries related specified agency_ids kept dropped (defaults TRUE, keeps entries).","code":""},{"path":"https://ipeagit.github.io/gtfstools/dev/reference/filter_by_agency_id.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Filter GTFS object by agency_id — filter_by_agency_id","text":"GTFS object passed gtfs parameter, filtering process.","code":""},{"path":[]},{"path":"https://ipeagit.github.io/gtfstools/dev/reference/filter_by_agency_id.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Filter GTFS object by agency_id — filter_by_agency_id","text":"","code":"data_path <- system.file(\"extdata/ber_gtfs.zip\", package = \"gtfstools\") gtfs <- read_gtfs(data_path) agency_id <- \"92\"  object.size(gtfs) #> 2227536 bytes  # keeps entries related to passed agency_id smaller_gtfs <- filter_by_agency_id(gtfs, agency_id) object.size(smaller_gtfs) #> 1125704 bytes  # drops entries related to passed agency_id smaller_gtfs <- filter_by_agency_id(gtfs, agency_id, keep = FALSE) object.size(smaller_gtfs) #> 32112 bytes"},{"path":"https://ipeagit.github.io/gtfstools/dev/reference/filter_by_route_id.html","id":null,"dir":"Reference","previous_headings":"","what":"Filter GTFS object by route_id — filter_by_route_id","title":"Filter GTFS object by route_id — filter_by_route_id","text":"Filters GTFS object route_ids, keeping (dropping) relevant entries file.","code":""},{"path":"https://ipeagit.github.io/gtfstools/dev/reference/filter_by_route_id.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Filter GTFS object by route_id — filter_by_route_id","text":"","code":"filter_by_route_id(gtfs, route_id, keep = TRUE)"},{"path":"https://ipeagit.github.io/gtfstools/dev/reference/filter_by_route_id.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Filter GTFS object by route_id — filter_by_route_id","text":"gtfs GTFS object, created read_gtfs(). route_id character vector. route_ids used filter data. keep logical. Whether entries related specified route_ids kept dropped (defaults TRUE, keeps entries).","code":""},{"path":"https://ipeagit.github.io/gtfstools/dev/reference/filter_by_route_id.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Filter GTFS object by route_id — filter_by_route_id","text":"GTFS object passed gtfs parameter, filtering process.","code":""},{"path":[]},{"path":"https://ipeagit.github.io/gtfstools/dev/reference/filter_by_route_id.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Filter GTFS object by route_id — filter_by_route_id","text":"","code":"data_path <- system.file(\"extdata/spo_gtfs.zip\", package = \"gtfstools\") gtfs <- read_gtfs(data_path) route_ids <- c(\"6450-51\", \"CPTM L11\")  object.size(gtfs) #> 811304 bytes  # keeps entries related to passed route_ids smaller_gtfs <- filter_by_route_id(gtfs, route_ids) object.size(smaller_gtfs) #> 116920 bytes  # drops entries related to passed route_ids smaller_gtfs <- filter_by_route_id(gtfs, route_ids, keep = FALSE) object.size(smaller_gtfs) #> 719032 bytes"},{"path":"https://ipeagit.github.io/gtfstools/dev/reference/filter_by_route_type.html","id":null,"dir":"Reference","previous_headings":"","what":"Filter GTFS object by route_type (transport mode) — filter_by_route_type","title":"Filter GTFS object by route_type (transport mode) — filter_by_route_type","text":"Filters GTFS object route_types, keeping (dropping) relevant entries file.","code":""},{"path":"https://ipeagit.github.io/gtfstools/dev/reference/filter_by_route_type.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Filter GTFS object by route_type (transport mode) — filter_by_route_type","text":"","code":"filter_by_route_type(gtfs, route_type, keep = TRUE)"},{"path":"https://ipeagit.github.io/gtfstools/dev/reference/filter_by_route_type.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Filter GTFS object by route_type (transport mode) — filter_by_route_type","text":"gtfs GTFS object, created read_gtfs(). route_type integer vector. route_types used filter data. keep logical. Whether entries related specified route_types kept dropped (defaults TRUE, keeps entries).","code":""},{"path":"https://ipeagit.github.io/gtfstools/dev/reference/filter_by_route_type.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Filter GTFS object by route_type (transport mode) — filter_by_route_type","text":"GTFS object passed gtfs parameter, filtering process.","code":""},{"path":"https://ipeagit.github.io/gtfstools/dev/reference/filter_by_route_type.html","id":"route-types","dir":"Reference","previous_headings":"","what":"Route types","title":"Filter GTFS object by route_type (transport mode) — filter_by_route_type","text":"Valid options include route types listed GTFS Schedule specification Google Transit implementation. types specified GTFS Schedule specification : 0 - Tram, Streetcar, Light rail. light rail street level system within metropolitan area. 1 - Subway, Metro. underground rail system within metropolitan area. 2 - Rail. Used intercity long-distance travel. 3 - Bus. Used short- long-distance bus routes. 4 - Ferry. Used short- long-distance boat service. 5 - Cable tram. Used street-level rail cars cable runs beneath vehicle, e.g., cable car San Francisco. 6 - Aerial lift, suspended cable car (e.g., gondola lift, aerial tramway). Cable transport cabins, cars, gondolas open chairs suspended means one cables. 7 - Funicular. rail system designed steep inclines. 11 - Trolleybus. Electric buses draw power overhead wires using poles. 12 - Monorail. Railway track consists single rail beam. types defined Google Transit's extension listed , including examples (available types): 100 - Railway Service - applicable (N/) 101 - High Speed Rail Service - TGV (FR), ICE (DE), Eurostar (GB) 102 - Long Distance Trains - InterCity/EuroCity 103 - Inter Regional Rail Service - InterRegio (DE), Cross County Rail (GB) 104 - Car Transport Rail Service 105 - Sleeper Rail Service - GNER Sleeper (GB) 106 - Regional Rail Service - TER (FR), Regionalzug (DE) 107 - Tourist Railway Service - Romney, Hythe & Dymchurch (GB) 108 - Rail Shuttle (Within Complex) - Gatwick Shuttle (GB), Sky Line (DE) 109 - Suburban Railway - S-Bahn (DE), RER (FR), S-tog (Kopenhagen) 110 - Replacement Rail Service 111 - Special Rail Service 112 - Lorry Transport Rail Service 113 - Rail Services 114 - Cross-Country Rail Service 115 - Vehicle Transport Rail Service 116 - Rack Pinion Railway - Rochers de Naye (CH), Dolderbahn (CH) 117 - Additional Rail Service 200 - Coach Service 201 - International Coach Service - EuroLine, Touring 202 - National Coach Service - National Express (GB) 203 - Shuttle Coach Service - Roissy Bus (FR), Reading-Heathrow (GB) 204 - Regional Coach Service 205 - Special Coach Service 206 - Sightseeing Coach Service 207 - Tourist Coach Service 208 - Commuter Coach Service 209 - Coach Services 400 - Urban Railway Service 401 - Metro Service - Métro de Paris 402 - Underground Service - London Underground, U-Bahn 403 - Urban Railway Service 404 - Urban Railway Services 405 - Monorail 700 - Bus Service 701 - Regional Bus Service - Eastbourne-Maidstone (GB) 702 - Express Bus Service - X19 Wokingham-Heathrow (GB) 703 - Stopping Bus Service - 38 London: Clapton Pond-Victoria (GB) 704 - Local Bus Service 705 - Night Bus Service - N prefixed buses London (GB) 706 - Post Bus Service - Maidstone P4 (GB) 707 - Special Needs Bus 708 - Mobility Bus Service 709 - Mobility Bus Registered Disabled 710 - Sightseeing Bus 711 - Shuttle Bus - 747 Heathrow-Gatwick Airport Service (GB) 712 - School Bus 713 - School Public Service Bus 714 - Rail Replacement Bus Service 715 - Demand Response Bus Service 716 - Bus Services 800 - Trolleybus Service 900 - Tram Service 901 - City Tram Service 902 - Local Tram Service - Munich (DE), Brussels (), Croydon (GB) 903 - Regional Tram Service 904 - Sightseeing Tram Service - Blackpool Seafront (GB) 905 - Shuttle Tram Service 906 - Tram Services 1000 - Water Transport Service 1100 - Air Service 1200 - Ferry Service 1300 - Aerial Lift Service - Telefèric de Montjuïc (ES), Saleve (CH), Roosevelt Island Tramway (US) 1301 - Telecabin Service 1302 - Cable Car Service 1303 - Elevator Service 1304 - Chair Lift Service 1305 - Drag Lift Service 1306 - Small Telecabin Service 1307 - Telecabin Services 1400 - Funicular Service - Rigiblick (Zürich, CH) 1500 - Taxi Service 1501 - Communal Taxi Service - Marshrutka (RU), dolmuş (TR) 1502 - Water Taxi Service 1503 - Rail Taxi Service 1504 - Bike Taxi Service 1505 - Licensed Taxi Service 1506 - Private Hire Service Vehicle 1507 - Taxi Services 1700 - Miscellaneous Service 1702 - Horse-drawn Carriage","code":""},{"path":[]},{"path":"https://ipeagit.github.io/gtfstools/dev/reference/filter_by_route_type.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Filter GTFS object by route_type (transport mode) — filter_by_route_type","text":"","code":"# read gtfs data_path <- system.file(\"extdata/spo_gtfs.zip\", package = \"gtfstools\") gtfs <- read_gtfs(data_path)  object.size(gtfs) #> 811304 bytes  # keeps entries related to passed route_types smaller_gtfs <- filter_by_route_type(gtfs, route_type = 1) object.size(smaller_gtfs) #> 180920 bytes  # drops entries related to passed route_types smaller_gtfs <- filter_by_route_type(gtfs, route_type = 1, keep = FALSE) object.size(smaller_gtfs) #> 654360 bytes"},{"path":"https://ipeagit.github.io/gtfstools/dev/reference/filter_by_service_id.html","id":null,"dir":"Reference","previous_headings":"","what":"Filter GTFS object by service_id — filter_by_service_id","title":"Filter GTFS object by service_id — filter_by_service_id","text":"Filters GTFS object service_ids, keeping (dropping) relevant entries file.","code":""},{"path":"https://ipeagit.github.io/gtfstools/dev/reference/filter_by_service_id.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Filter GTFS object by service_id — filter_by_service_id","text":"","code":"filter_by_service_id(gtfs, service_id, keep = TRUE)"},{"path":"https://ipeagit.github.io/gtfstools/dev/reference/filter_by_service_id.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Filter GTFS object by service_id — filter_by_service_id","text":"gtfs GTFS object, created read_gtfs(). service_id character vector. service_ids used filter data. keep logical. Whether entries related specified service_ids kept dropped (defaults TRUE, keeps entries).","code":""},{"path":"https://ipeagit.github.io/gtfstools/dev/reference/filter_by_service_id.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Filter GTFS object by service_id — filter_by_service_id","text":"GTFS object passed gtfs parameter, filtering process.","code":""},{"path":[]},{"path":"https://ipeagit.github.io/gtfstools/dev/reference/filter_by_service_id.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Filter GTFS object by service_id — filter_by_service_id","text":"","code":"data_path <- system.file(\"extdata/spo_gtfs.zip\", package = \"gtfstools\") gtfs <- read_gtfs(data_path) service_ids <- c(\"USD\", \"U__\")  object.size(gtfs) #> 811304 bytes  # keeps entries related to the specified service_ids smaller_gtfs <- filter_by_service_id(gtfs, service_ids) object.size(smaller_gtfs) #> 810568 bytes  # drops entries related to the specified service_ids smaller_gtfs <- filter_by_service_id(gtfs, service_ids, keep = FALSE) object.size(smaller_gtfs) #> 19648 bytes"},{"path":"https://ipeagit.github.io/gtfstools/dev/reference/filter_by_sf.html","id":null,"dir":"Reference","previous_headings":"","what":"Filter a GTFS object using a simple features object (deprecated) — filter_by_sf","title":"Filter a GTFS object using a simple features object (deprecated) — filter_by_sf","text":"function deprecated current package version completely removed version 2.0.0 onward. Please use filter_by_spatial_extent() instead. Filters GTFS object using geometry sf object, keeping (dropping) entries related shapes trips selected spatial operation.","code":""},{"path":"https://ipeagit.github.io/gtfstools/dev/reference/filter_by_sf.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Filter a GTFS object using a simple features object (deprecated) — filter_by_sf","text":"","code":"filter_by_sf(gtfs, geom, spatial_operation = sf::st_intersects, keep = TRUE)"},{"path":"https://ipeagit.github.io/gtfstools/dev/reference/filter_by_sf.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Filter a GTFS object using a simple features object (deprecated) — filter_by_sf","text":"gtfs GTFS object, created read_gtfs(). geom sf object. Describes geometry used filter data. spatial_operation spatial operation function set options listed geos_binary_pred (check DE-I9M Wikipedia entry definition function). Defaults sf::st_intersects, tests shapes trips intersection object specified geom. Please note geom passed x argument functions. keep logical. Whether entries related shapes trips cross given geometry kept dropped (defaults TRUE, keeps entries).","code":""},{"path":"https://ipeagit.github.io/gtfstools/dev/reference/filter_by_sf.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Filter a GTFS object using a simple features object (deprecated) — filter_by_sf","text":"GTFS object passed gtfs parameter, filtering process.","code":""},{"path":[]},{"path":"https://ipeagit.github.io/gtfstools/dev/reference/filter_by_sf.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Filter a GTFS object using a simple features object (deprecated) — filter_by_sf","text":"","code":"data_path <- system.file(\"extdata/spo_gtfs.zip\", package = \"gtfstools\") gtfs <- read_gtfs(data_path)  shape_id <- \"68962\" shape_sf <- convert_shapes_to_sf(gtfs, shape_id) bbox <- sf::st_bbox(shape_sf) object.size(gtfs) #> 860808 bytes  # keeps entries that intersect with the specified polygon smaller_gtfs <- filter_by_sf(gtfs, bbox) #> Warning: `filter_by_sf()` was deprecated in gtfstools 1.3.0. #> ℹ Please use `filter_by_spatial_extent()` instead. #> ℹ For backwards compatibility reasons, usage of `filter_by_sf()` is still #>   allowed as of the current version, but the function will be removed from the #>   package in version 2.0.0. object.size(smaller_gtfs) #> 324952 bytes  # drops entries that intersect with the specified polygon smaller_gtfs <- filter_by_sf(gtfs, bbox, keep = FALSE) #> Warning: `filter_by_sf()` was deprecated in gtfstools 1.3.0. #> ℹ Please use `filter_by_spatial_extent()` instead. #> ℹ For backwards compatibility reasons, usage of `filter_by_sf()` is still #>   allowed as of the current version, but the function will be removed from the #>   package in version 2.0.0. object.size(smaller_gtfs) #> 512288 bytes  # uses a different function to filter the gtfs smaller_gtfs <- filter_by_sf(gtfs, bbox, spatial_operation = sf::st_contains) #> Warning: `filter_by_sf()` was deprecated in gtfstools 1.3.0. #> ℹ Please use `filter_by_spatial_extent()` instead. #> ℹ For backwards compatibility reasons, usage of `filter_by_sf()` is still #>   allowed as of the current version, but the function will be removed from the #>   package in version 2.0.0. object.size(smaller_gtfs) #> 68976 bytes"},{"path":"https://ipeagit.github.io/gtfstools/dev/reference/filter_by_shape_id.html","id":null,"dir":"Reference","previous_headings":"","what":"Filter GTFS object by shape_id — filter_by_shape_id","title":"Filter GTFS object by shape_id — filter_by_shape_id","text":"Filters GTFS object shape_ids, keeping (dropping) relevant entries file.","code":""},{"path":"https://ipeagit.github.io/gtfstools/dev/reference/filter_by_shape_id.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Filter GTFS object by shape_id — filter_by_shape_id","text":"","code":"filter_by_shape_id(gtfs, shape_id, keep = TRUE)"},{"path":"https://ipeagit.github.io/gtfstools/dev/reference/filter_by_shape_id.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Filter GTFS object by shape_id — filter_by_shape_id","text":"gtfs GTFS object, created read_gtfs(). shape_id character vector. shape_ids used filter data. keep logical. Whether entries related specified shape_ids kept dropped (defaults TRUE, keeps entries).","code":""},{"path":"https://ipeagit.github.io/gtfstools/dev/reference/filter_by_shape_id.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Filter GTFS object by shape_id — filter_by_shape_id","text":"GTFS object passed gtfs parameter, filtering process.","code":""},{"path":[]},{"path":"https://ipeagit.github.io/gtfstools/dev/reference/filter_by_shape_id.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Filter GTFS object by shape_id — filter_by_shape_id","text":"","code":"data_path <- system.file(\"extdata/spo_gtfs.zip\", package = \"gtfstools\") gtfs <- read_gtfs(data_path) shape_ids <- c(\"17846\", \"68962\")  object.size(gtfs) #> 811304 bytes  # keeps entries related to passed shape_ids smaller_gtfs <- filter_by_shape_id(gtfs, shape_ids) object.size(smaller_gtfs) #> 99456 bytes  # drops entries related to passed shape_ids smaller_gtfs <- filter_by_shape_id(gtfs, shape_ids, keep = FALSE) object.size(smaller_gtfs) #> 740840 bytes"},{"path":"https://ipeagit.github.io/gtfstools/dev/reference/filter_by_spatial_extent.html","id":null,"dir":"Reference","previous_headings":"","what":"Filter a GTFS object using a spatial extent — filter_by_spatial_extent","title":"Filter a GTFS object using a spatial extent — filter_by_spatial_extent","text":"Filters GTFS object using spatial extent (passed sf object), keeping (dropping) entries related shapes trips whose geometries selected specified spatial operation.","code":""},{"path":"https://ipeagit.github.io/gtfstools/dev/reference/filter_by_spatial_extent.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Filter a GTFS object using a spatial extent — filter_by_spatial_extent","text":"","code":"filter_by_spatial_extent(   gtfs,   geom,   spatial_operation = sf::st_intersects,   keep = TRUE )"},{"path":"https://ipeagit.github.io/gtfstools/dev/reference/filter_by_spatial_extent.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Filter a GTFS object using a spatial extent — filter_by_spatial_extent","text":"gtfs GTFS object, created read_gtfs(). geom sf object. Describes spatial extent used filter data. spatial_operation spatial operation function set options listed geos_binary_pred (check DE-I9M Wikipedia entry definition function). Defaults sf::st_intersects, tests shapes trips intersection object specified geom. Please note geom passed x argument functions. keep logical. Whether entries related shapes trips selected given spatial operation kept dropped (defaults TRUE, keeps entries).","code":""},{"path":"https://ipeagit.github.io/gtfstools/dev/reference/filter_by_spatial_extent.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Filter a GTFS object using a spatial extent — filter_by_spatial_extent","text":"GTFS object passed gtfs parameter, filtering process.","code":""},{"path":[]},{"path":"https://ipeagit.github.io/gtfstools/dev/reference/filter_by_spatial_extent.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Filter a GTFS object using a spatial extent — filter_by_spatial_extent","text":"","code":"data_path <- system.file(\"extdata/spo_gtfs.zip\", package = \"gtfstools\") gtfs <- read_gtfs(data_path)  shape_id <- \"68962\" shape_sf <- convert_shapes_to_sf(gtfs, shape_id) bbox <- sf::st_bbox(shape_sf) object.size(gtfs) #> 860808 bytes  # keeps entries that intersect with the specified polygon smaller_gtfs <- filter_by_spatial_extent(gtfs, bbox) object.size(smaller_gtfs) #> 324952 bytes  # drops entries that intersect with the specified polygon smaller_gtfs <- filter_by_spatial_extent(gtfs, bbox, keep = FALSE) object.size(smaller_gtfs) #> 512288 bytes  # uses a different function to filter the gtfs smaller_gtfs <- filter_by_spatial_extent(   gtfs,   bbox,   spatial_operation = sf::st_contains ) object.size(smaller_gtfs) #> 68976 bytes"},{"path":"https://ipeagit.github.io/gtfstools/dev/reference/filter_by_stop_id.html","id":null,"dir":"Reference","previous_headings":"","what":"Filter GTFS object by stop_id — filter_by_stop_id","title":"Filter GTFS object by stop_id — filter_by_stop_id","text":"Filters GTFS object stop_ids, keeping (dropping) relevant entries file.","code":""},{"path":"https://ipeagit.github.io/gtfstools/dev/reference/filter_by_stop_id.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Filter GTFS object by stop_id — filter_by_stop_id","text":"","code":"filter_by_stop_id(   gtfs,   stop_id,   keep = TRUE,   include_children = TRUE,   include_parents = keep,   full_trips = TRUE )"},{"path":"https://ipeagit.github.io/gtfstools/dev/reference/filter_by_stop_id.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Filter GTFS object by stop_id — filter_by_stop_id","text":"gtfs GTFS object, created read_gtfs(). stop_id character vector. stop_ids used filter data. keep logical. Whether entries related trip_ids passes specified stop_ids kept dropped (defaults TRUE, keeps entries). include_children logical. Whether filtered output keep/drop children stops specified stop_id. Defaults TRUE - .e. default children stops kept parents kept dropped parents dropped. include_parents logical. Whether filtered output keep/drop parent stations specified stop_id. Defaults value keep - .e. default parent stations kept children kept dropped, can parents multiple stops necessarily dropped, even sibling . full_trips logical. Whether keep stops compose trips pass stops specified stop_id. Defaults TRUE, order preserve behavior function versions 1.2.0 . Please note TRUE, resultant filtered feed may contain stops ones specified stop_id preserve integrity trips. IMPORTANT: using full_trips = TRUE flagged deprecated version 1.3.0 parameter default FALSE version 2.0.0 onward.","code":""},{"path":"https://ipeagit.github.io/gtfstools/dev/reference/filter_by_stop_id.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Filter GTFS object by stop_id — filter_by_stop_id","text":"GTFS object passed gtfs parameter, filtering process.","code":""},{"path":[]},{"path":"https://ipeagit.github.io/gtfstools/dev/reference/filter_by_stop_id.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Filter GTFS object by stop_id — filter_by_stop_id","text":"","code":"data_path <- system.file(\"extdata/spo_gtfs.zip\", package = \"gtfstools\") gtfs <- read_gtfs(data_path) stop_ids <- c(\"18848\", \"940004157\")  object.size(gtfs) #> 811304 bytes  # keeps entries related to trips that pass through specified stop_ids smaller_gtfs <- filter_by_stop_id(gtfs, stop_ids, full_trips = FALSE) object.size(smaller_gtfs) #> 64272 bytes  # drops entries related to trips that pass through specified stop_ids smaller_gtfs <- filter_by_stop_id(   gtfs,   stop_ids,   keep = FALSE,   full_trips = FALSE ) object.size(smaller_gtfs) #> 809872 bytes  # the old behavior of filtering trips that contained the specified stops has # been deprecated invisible(filter_by_stop_id(gtfs, stop_ids, full_trips = TRUE)) #> Warning: The `filter_by_stop_id()` behavior of filtering by trips that contain the #> specified stops was deprecated in gtfstools 1.3.0. #> ℹ For backwards compatibility reasons, this behavior is still the default as of #>   version 1.3.0, and is controlled by the parameter `full_trips`. #> ℹ Please set `full_trips` to \"FALSE\" to actually filter by `stop_ids`. This #>   behavior will be the default from version 2.0.0 onward. #> ℹ To achieve the old behavior, manually subset the `stop_times` table by #>   `stop_id` and specify the `trip_ids` included in the output in #>   `filter_by_trip_id()`."},{"path":"https://ipeagit.github.io/gtfstools/dev/reference/filter_by_time_of_day.html","id":null,"dir":"Reference","previous_headings":"","what":"Filter GTFS object by time of day — filter_by_time_of_day","title":"Filter GTFS object by time of day — filter_by_time_of_day","text":"Filters GTFS object time day, keeping (dropping) relevant entries file. Please see details section information function filters frequencies stop_times tables, well handles stop_times tables contain trips empty departure arrival times.","code":""},{"path":"https://ipeagit.github.io/gtfstools/dev/reference/filter_by_time_of_day.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Filter GTFS object by time of day — filter_by_time_of_day","text":"","code":"filter_by_time_of_day(   gtfs,   from,   to,   keep = TRUE,   full_trips = FALSE,   update_frequencies = TRUE )"},{"path":"https://ipeagit.github.io/gtfstools/dev/reference/filter_by_time_of_day.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Filter GTFS object by time of day — filter_by_time_of_day","text":"gtfs GTFS object, created read_gtfs(). string. starting point time day, \"HH:MM:SS\" format. string. ending point time day, \"HH:MM:SS\" format. keep logical. Whether entries related specified time day kept dropped (defaults TRUE, keeps entries). full_trips logical. Whether trips treated immutable blocks stops considered separately filtering stop_times table (defaults FALSE, considers stop individually). Please check details section information parameter changes function behaviour. update_frequencies logical. Whether frequencies table start_time end_time fields updated fit inside/outside specified time day (defaults FALSE, update fields).","code":""},{"path":"https://ipeagit.github.io/gtfstools/dev/reference/filter_by_time_of_day.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Filter GTFS object by time of day — filter_by_time_of_day","text":"GTFS object passed gtfs parameter, filtering process.","code":""},{"path":"https://ipeagit.github.io/gtfstools/dev/reference/filter_by_time_of_day.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Filter GTFS object by time of day — filter_by_time_of_day","text":"filtering frequencies table, filter_by_time_of_day() respects exact_times field. field indicates whether service follows fixed schedule throughout day . 0 (present), service follow fixed schedule. Instead, operators try maintain listed headways. cases, update_frequencies TRUE just update start_time end_time appropriate value (value used depends keep). exact_times 1, however, operators try strictly adhere start times headway. result, updating start_time field need follow listed headway. example, take trip start time listed 06:00:00, end time listed 08:00:00 headway listed 300 secs (5 minutes). decide filter feed keep time day 06:32:00 08:00:00 updating frequencies, start_time field must updated 06:35:00 order preserve correct departure times trips, instead simply updating 06:32:00. Another things keep eye filtering frequencies table corresponding stop_times entries trips listed frequencies table filtered, even departure arrival times fall outside specified time day. stop_times entries frequencies' trips just templates describe long segment two stops takes, departure arrival times listed actually represent actual departure arrival times seen practice. Taking example listed , corresponding stop_times entries trip describe departure first stop 12:00:00 arrival second stop 12:03:00. mean trip actually leave arrive stops times, rather takes 3 minutes get first second stop. trip departs first stop 06:35:00, get second 06:38:00. filtering stop_times table, details observed. First, one wish filter GTFS object order keep trips cross given time day, whereas others may want keep specific entries fall inside specified time day. example, take trip leaves first stop 06:30:00, gets second 06:35:00 gets third 06:45:00. filtering keep entire trips cross time day 06:30:00 06:40:00, three stops kept. , however, want keep entries fall within specified time day, first two kept. control behaviour need set full_trips parameter. TRUE, function behaves like first case, FALSE, like second. using full_trips conjunction keep, please note behaviour stack. TRUE, trips always fully kept. keep FALSE, however, trips fully dropped, even stops visited outside specified time day. Finally, please note many GTFS feeds may contain stop_times entries empty departure arrival times. cases, filtering time day full_trips FALSE drop entries empty times. Please set full_trips TRUE preserve entries.","code":""},{"path":[]},{"path":"https://ipeagit.github.io/gtfstools/dev/reference/filter_by_time_of_day.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Filter GTFS object by time of day — filter_by_time_of_day","text":"","code":"data_path <- system.file(\"extdata/spo_gtfs.zip\", package = \"gtfstools\") gtfs <- read_gtfs(data_path)  # taking a look at the original frequencies and stop_times head(gtfs$frequencies) #>       trip_id start_time end_time headway_secs #>        <char>     <char>   <char>        <int> #> 1: CPTM L07-0   04:00:00 04:59:00          720 #> 2: CPTM L07-0   05:00:00 05:59:00          360 #> 3: CPTM L07-0   06:00:00 06:59:00          360 #> 4: CPTM L07-0   07:00:00 07:59:00          360 #> 5: CPTM L07-0   08:00:00 08:59:00          360 #> 6: CPTM L07-0   09:00:00 09:59:00          480 head(gtfs$stop_times) #>       trip_id arrival_time departure_time stop_id stop_sequence #>        <char>       <char>         <char>  <char>         <int> #> 1: CPTM L07-0     04:00:00       04:00:00   18940             1 #> 2: CPTM L07-0     04:08:00       04:08:00   18920             2 #> 3: CPTM L07-0     04:16:00       04:16:00   18919             3 #> 4: CPTM L07-0     04:24:00       04:24:00   18917             4 #> 5: CPTM L07-0     04:32:00       04:32:00   18916             5 #> 6: CPTM L07-0     04:40:00       04:40:00   18965             6  smaller_gtfs <- filter_by_time_of_day(gtfs, \"05:00:00\", \"06:00:00\")  # filter_by_time_of_day filters the frequencies table but doesn't filter the # stop_times table because they're just templates head(smaller_gtfs$frequencies) #>       trip_id start_time end_time headway_secs #>        <char>     <char>   <char>        <int> #> 1: CPTM L07-0   05:00:00 05:59:00          360 #> 2: CPTM L07-1   05:00:00 05:59:00          360 #> 3: CPTM L08-0   05:00:00 05:59:00          480 #> 4: CPTM L08-1   05:00:00 05:59:00          480 #> 5: CPTM L09-0   05:00:00 05:59:00          480 #> 6: CPTM L09-1   05:00:00 05:59:00          480 head(smaller_gtfs$stop_times) #>       trip_id arrival_time departure_time stop_id stop_sequence #>        <char>       <char>         <char>  <char>         <int> #> 1: CPTM L07-0     04:00:00       04:00:00   18940             1 #> 2: CPTM L07-0     04:08:00       04:08:00   18920             2 #> 3: CPTM L07-0     04:16:00       04:16:00   18919             3 #> 4: CPTM L07-0     04:24:00       04:24:00   18917             4 #> 5: CPTM L07-0     04:32:00       04:32:00   18916             5 #> 6: CPTM L07-0     04:40:00       04:40:00   18965             6  # frequencies entries can be adjusted using update_frequencies = TRUE smaller_gtfs <- filter_by_time_of_day(   gtfs,   \"05:30:00\",   \"06:00:00\",   update_frequencies = TRUE ) head(smaller_gtfs$frequencies) #>       trip_id start_time end_time headway_secs #>        <char>     <char>   <char>        <int> #> 1: CPTM L07-0   05:30:00 05:59:00          360 #> 2: CPTM L07-1   05:30:00 05:59:00          360 #> 3: CPTM L08-0   05:30:00 05:59:00          480 #> 4: CPTM L08-1   05:30:00 05:59:00          480 #> 5: CPTM L09-0   05:30:00 05:59:00          480 #> 6: CPTM L09-1   05:30:00 05:59:00          480  # when keep = FALSE, the behaviour of the function in general, and of # update_frequencies in particular, is a bit different smaller_gtfs <- filter_by_time_of_day(   gtfs,   \"05:30:00\",   \"06:00:00\",   keep = FALSE,   update_frequencies = TRUE ) head(smaller_gtfs$frequencies) #>       trip_id start_time end_time headway_secs #>        <char>     <char>   <char>        <int> #> 1: CPTM L07-0   04:00:00 04:59:00          720 #> 2: CPTM L07-0   05:00:00 05:30:00          360 #> 3: CPTM L07-0   06:00:00 06:59:00          360 #> 4: CPTM L07-0   07:00:00 07:59:00          360 #> 5: CPTM L07-0   08:00:00 08:59:00          360 #> 6: CPTM L07-0   09:00:00 09:59:00          480  # let's remove the frequencies table to check the behaviour of full_trips gtfs$frequencies <- NULL smaller_gtfs <- filter_by_time_of_day(   gtfs,   \"05:30:00\",   \"06:00:00\" ) head(smaller_gtfs$stop_times) #>       trip_id arrival_time departure_time stop_id stop_sequence #>        <char>       <char>         <char>  <char>         <int> #> 1: CPTM L07-0     05:36:00       05:36:00   18926            13 #> 2: CPTM L07-0     05:44:00       05:44:00   18971            14 #> 3: CPTM L07-0     05:52:00       05:52:00   18972            15 #> 4: CPTM L07-0     06:00:00       06:00:00   18973            16 #> 5: CPTM L07-1     05:36:00       05:36:00   18965            13 #> 6: CPTM L07-1     05:44:00       05:44:00   18916            14  smaller_gtfs <- filter_by_time_of_day(   gtfs,   \"05:30:00\",   \"06:00:00\",   full_trips = TRUE ) head(smaller_gtfs$stop_times) #>       trip_id arrival_time departure_time stop_id stop_sequence #>        <char>       <char>         <char>  <char>         <int> #> 1: CPTM L07-0     04:00:00       04:00:00   18940             1 #> 2: CPTM L07-0     04:08:00       04:08:00   18920             2 #> 3: CPTM L07-0     04:16:00       04:16:00   18919             3 #> 4: CPTM L07-0     04:24:00       04:24:00   18917             4 #> 5: CPTM L07-0     04:32:00       04:32:00   18916             5 #> 6: CPTM L07-0     04:40:00       04:40:00   18965             6"},{"path":"https://ipeagit.github.io/gtfstools/dev/reference/filter_by_trip_id.html","id":null,"dir":"Reference","previous_headings":"","what":"Filter GTFS object by trip_id — filter_by_trip_id","title":"Filter GTFS object by trip_id — filter_by_trip_id","text":"Filters GTFS object trip_ids, keeping (dropping) relevant entries file.","code":""},{"path":"https://ipeagit.github.io/gtfstools/dev/reference/filter_by_trip_id.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Filter GTFS object by trip_id — filter_by_trip_id","text":"","code":"filter_by_trip_id(gtfs, trip_id, keep = TRUE)"},{"path":"https://ipeagit.github.io/gtfstools/dev/reference/filter_by_trip_id.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Filter GTFS object by trip_id — filter_by_trip_id","text":"gtfs GTFS object, created read_gtfs(). trip_id character vector. trip_ids used filter data. keep logical. Whether entries related specified trip_ids kept dropped (defaults TRUE, keeps entries).","code":""},{"path":"https://ipeagit.github.io/gtfstools/dev/reference/filter_by_trip_id.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Filter GTFS object by trip_id — filter_by_trip_id","text":"GTFS object passed gtfs parameter, filtering process.","code":""},{"path":[]},{"path":"https://ipeagit.github.io/gtfstools/dev/reference/filter_by_trip_id.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Filter GTFS object by trip_id — filter_by_trip_id","text":"","code":"data_path <- system.file(\"extdata/spo_gtfs.zip\", package = \"gtfstools\") gtfs <- read_gtfs(data_path) trip_ids <- c(\"CPTM L07-0\", \"2002-10-0\")  object.size(gtfs) #> 811304 bytes  # keeps entries related to passed trip_ids smaller_gtfs <- filter_by_trip_id(gtfs, trip_ids) object.size(smaller_gtfs) #> 73056 bytes  # drops entries related to passed trip_ids smaller_gtfs <- filter_by_trip_id(gtfs, trip_ids, keep = FALSE) object.size(smaller_gtfs) #> 768792 bytes"},{"path":"https://ipeagit.github.io/gtfstools/dev/reference/filter_by_weekday.html","id":null,"dir":"Reference","previous_headings":"","what":"Filter GTFS object by weekday — filter_by_weekday","title":"Filter GTFS object by weekday — filter_by_weekday","text":"Filters GTFS object weekday, keeping (dropping) relevant entries file.","code":""},{"path":"https://ipeagit.github.io/gtfstools/dev/reference/filter_by_weekday.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Filter GTFS object by weekday — filter_by_weekday","text":"","code":"filter_by_weekday(gtfs, weekday, combine = \"or\", keep = TRUE)"},{"path":"https://ipeagit.github.io/gtfstools/dev/reference/filter_by_weekday.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Filter GTFS object by weekday — filter_by_weekday","text":"gtfs GTFS object, created read_gtfs(). weekday character vector. weekdays used filter data. Possible values c(\"monday\", \"tuesday\", \"wednesday\", \"thursday\", \"friday\", \"saturday\", \"sunday\"). combine string. Specifies logic operation () used filter calendar table multiple weekdays specified. Defaults \"\". Please check details examples sections information argument usage. keep logical. Whether entries related specified weekdays kept dropped (defaults TRUE, keeps entries).","code":""},{"path":"https://ipeagit.github.io/gtfstools/dev/reference/filter_by_weekday.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Filter GTFS object by weekday — filter_by_weekday","text":"GTFS object passed gtfs parameter, filtering process.","code":""},{"path":"https://ipeagit.github.io/gtfstools/dev/reference/filter_by_weekday.html","id":"combine-usage","dir":"Reference","previous_headings":"","what":"combine usage","title":"Filter GTFS object by weekday — filter_by_weekday","text":"filtering calendar table using weekdays, one reason process different ways. example, may want keep services run mondays tuesdays. may want keep services run EITHER mondays tuesdays. first case equivalent filtering using expression monday == 1 & tuesday == 1, second uses monday == 1 | tuesday == 1. can use combine argument control behaviour. Please note combine also works together keep. Using examples listed , either keep entries related services run mondays tuesdays drop , depending value pass keep.","code":""},{"path":[]},{"path":"https://ipeagit.github.io/gtfstools/dev/reference/filter_by_weekday.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Filter GTFS object by weekday — filter_by_weekday","text":"","code":"# read gtfs data_path <- system.file(\"extdata/spo_gtfs.zip\", package = \"gtfstools\") gtfs <- read_gtfs(data_path)  object.size(gtfs) #> 811304 bytes  # keeps entries related to services than run EITHER on monday OR on sunday smaller_gtfs <- filter_by_weekday(gtfs, weekday = c(\"monday\", \"sunday\")) smaller_gtfs$calendar[, c(\"service_id\", \"monday\", \"sunday\")] #>     service_id monday sunday #>         <char>  <int>  <int> #>  1:        USD      1      1 #>  2:        U__      1      0 #>  3:        US_      1      0 #>  4:        _SD      0      1 #>  5:        __D      0      1 #>  6:        USD      1      1 #>  7:        U__      1      0 #>  8:        US_      1      0 #>  9:        _SD      0      1 #> 10:        __D      0      1 object.size(smaller_gtfs) #> 811248 bytes  # keeps entries related to services than run on monday AND on sunday smaller_gtfs <- filter_by_weekday(   gtfs,   weekday = c(\"monday\", \"sunday\"),   combine = \"and\" ) smaller_gtfs$calendar[, c(\"service_id\", \"monday\", \"sunday\")] #>    service_id monday sunday #>        <char>  <int>  <int> #> 1:        USD      1      1 #> 2:        USD      1      1 object.size(smaller_gtfs) #> 762152 bytes  # drops entries related to services than run EITHER on monday OR on sunday # the resulting gtfs shouldn't include any trips running on these days smaller_gtfs <- filter_by_weekday(   gtfs,   weekday = c(\"monday\", \"sunday\"),   keep = FALSE ) smaller_gtfs$calendar[, c(\"service_id\", \"monday\", \"sunday\")] #>    service_id monday sunday #>        <char>  <int>  <int> #> 1:        _S_      0      0 #> 2:        _S_      0      0 object.size(smaller_gtfs) #> 19168 bytes  # drops entries related to services than run on monday AND on sunday # the resulting gtfs may include trips that run on these days, but no trips # that run on both these days smaller_gtfs <- filter_by_weekday(   gtfs,   weekday = c(\"monday\", \"sunday\"),   combine = \"and\",   keep = FALSE ) smaller_gtfs$calendar[, c(\"service_id\", \"monday\", \"sunday\")] #>     service_id monday sunday #>         <char>  <int>  <int> #>  1:        U__      1      0 #>  2:        US_      1      0 #>  3:        _SD      0      1 #>  4:        __D      0      1 #>  5:        _S_      0      0 #>  6:        U__      1      0 #>  7:        US_      1      0 #>  8:        _SD      0      1 #>  9:        __D      0      1 #> 10:        _S_      0      0 object.size(smaller_gtfs) #> 69880 bytes"},{"path":"https://ipeagit.github.io/gtfstools/dev/reference/frequencies_to_stop_times.html","id":null,"dir":"Reference","previous_headings":"","what":"Convert frequencies to stop times — frequencies_to_stop_times","title":"Convert frequencies to stop times — frequencies_to_stop_times","text":"Creates stop_times entries based frequencies specified frequencies table.","code":""},{"path":"https://ipeagit.github.io/gtfstools/dev/reference/frequencies_to_stop_times.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Convert frequencies to stop times — frequencies_to_stop_times","text":"","code":"frequencies_to_stop_times(gtfs, trip_id = NULL, force = FALSE)"},{"path":"https://ipeagit.github.io/gtfstools/dev/reference/frequencies_to_stop_times.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Convert frequencies to stop times — frequencies_to_stop_times","text":"gtfs GTFS object, created read_gtfs(). trip_id character vector including trip_ids frequencies converted stop_times entries. NULL (default), function converts trips listed frequencies table. force Whether convert trips specified frequencies table even described stop_times (defaults FALSE). set TRUE, mismatched trip removed frequencies table correspondent entries trips substituted converted counterpart.","code":""},{"path":"https://ipeagit.github.io/gtfstools/dev/reference/frequencies_to_stop_times.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Convert frequencies to stop times — frequencies_to_stop_times","text":"GTFS object updated frequencies, stop_times trips tables.","code":""},{"path":"https://ipeagit.github.io/gtfstools/dev/reference/frequencies_to_stop_times.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Convert frequencies to stop times — frequencies_to_stop_times","text":"single trip described frequencies table may yield multiple trips converting GTFS. say, example, frequencies table describes trip called \"example_trip\", starts 08:00 stops 09:00, 30 minutes headway. practice, means one trip depart 08:00, another 08:30 yet another 09:00. frequencies_to_stop_times() appends \"_<n>\" suffix newly created trips differentiate one (e.g. case, new trips, described trips stop_times tables, called \"example_trip_1\", \"example_trip_2\" \"example_trip_3\").","code":""},{"path":"https://ipeagit.github.io/gtfstools/dev/reference/frequencies_to_stop_times.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Convert frequencies to stop times — frequencies_to_stop_times","text":"","code":"data_path <- system.file(\"extdata/spo_gtfs.zip\", package = \"gtfstools\") gtfs <- read_gtfs(data_path) trip <- \"CPTM L07-0\"  # converts all trips listed in the frequencies table converted_gtfs <- frequencies_to_stop_times(gtfs)  # converts only the specified trip_id converted_gtfs <- frequencies_to_stop_times(gtfs, trip)  # how the specified trip_id was described in the frequencies table head(gtfs$frequencies[trip_id == trip]) #>       trip_id start_time end_time headway_secs #>        <char>     <char>   <char>        <int> #> 1: CPTM L07-0   04:00:00 04:59:00          720 #> 2: CPTM L07-0   05:00:00 05:59:00          360 #> 3: CPTM L07-0   06:00:00 06:59:00          360 #> 4: CPTM L07-0   07:00:00 07:59:00          360 #> 5: CPTM L07-0   08:00:00 08:59:00          360 #> 6: CPTM L07-0   09:00:00 09:59:00          480  # the first row of each equivalent stop_times entry in the converted gtfs equivalent_stop_times <- converted_gtfs$stop_times[grepl(trip, trip_id)] equivalent_stop_times[equivalent_stop_times[, .I[1], by = trip_id]$V1] #>             trip_id arrival_time departure_time stop_id stop_sequence #>              <char>       <char>         <char>  <char>         <int> #>   1:   CPTM L07-0_1     04:00:00       04:00:00   18940             1 #>   2:   CPTM L07-0_2     04:12:00       04:12:00   18940             1 #>   3:   CPTM L07-0_3     04:24:00       04:24:00   18940             1 #>   4:   CPTM L07-0_4     04:36:00       04:36:00   18940             1 #>   5:   CPTM L07-0_5     04:48:00       04:48:00   18940             1 #>  ---                                                                  #> 157: CPTM L07-0_157     23:00:00       23:00:00   18940             1 #> 158: CPTM L07-0_158     23:12:00       23:12:00   18940             1 #> 159: CPTM L07-0_159     23:24:00       23:24:00   18940             1 #> 160: CPTM L07-0_160     23:36:00       23:36:00   18940             1 #> 161: CPTM L07-0_161     23:48:00       23:48:00   18940             1"},{"path":"https://ipeagit.github.io/gtfstools/dev/reference/get_children_stops.html","id":null,"dir":"Reference","previous_headings":"","what":"Get children stops recursively — get_children_stops","title":"Get children stops recursively — get_children_stops","text":"Returns (recursive) children stops specified stop_id. Recursive context means returns children's children (.e. first children, children's children, children, ).","code":""},{"path":"https://ipeagit.github.io/gtfstools/dev/reference/get_children_stops.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get children stops recursively — get_children_stops","text":"","code":"get_children_stops(gtfs, stop_id = NULL)"},{"path":"https://ipeagit.github.io/gtfstools/dev/reference/get_children_stops.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get children stops recursively — get_children_stops","text":"gtfs GTFS object, created read_gtfs(). stop_id string vector including stop_ids children returned. NULL (default), function returns children every stop_id GTFS.","code":""},{"path":"https://ipeagit.github.io/gtfstools/dev/reference/get_children_stops.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get children stops recursively — get_children_stops","text":"data.table containing stop_ids children' stop_ids. stop child, correspondent child_id entry marked \"\".","code":""},{"path":"https://ipeagit.github.io/gtfstools/dev/reference/get_children_stops.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get children stops recursively — get_children_stops","text":"","code":"data_path <- system.file(\"extdata/ggl_gtfs.zip\", package = \"gtfstools\") gtfs <- read_gtfs(data_path)  children <- get_children_stops(gtfs) head(children) #>    stop_id child_id #>     <char>   <char> #> 1:     F12       E1 #> 2:     F12       E2 #> 3:     F12       E3 #> 4:     F12       E4 #> 5:     F12       E5 #> 6:     F12       N1  # use the stop_id argument to control which stops are analyzed children <- get_children_stops(gtfs, stop_id = c(\"F12S\", \"F12N\")) children #>    stop_id child_id #>     <char>   <char> #> 1:    F12S       B1 #> 2:    F12S       B3 #> 3:    F12N       B2 #> 4:    F12N       B4 #> 5:      B1          #> 6:      B3          #> 7:      B2          #> 8:      B4"},{"path":"https://ipeagit.github.io/gtfstools/dev/reference/get_parent_station.html","id":null,"dir":"Reference","previous_headings":"","what":"Get parent stations recursively — get_parent_station","title":"Get parent stations recursively — get_parent_station","text":"Returns (recursive) parent stations specified stop_id. Recursive context means returns parents' parents (.e. first parents, parents' parents, parents, ).","code":""},{"path":"https://ipeagit.github.io/gtfstools/dev/reference/get_parent_station.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get parent stations recursively — get_parent_station","text":"","code":"get_parent_station(gtfs, stop_id = NULL)"},{"path":"https://ipeagit.github.io/gtfstools/dev/reference/get_parent_station.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get parent stations recursively — get_parent_station","text":"gtfs GTFS object, created read_gtfs(). stop_id string vector including stop_ids parents returned. NULL (default), function returns parents every stop_id GTFS.","code":""},{"path":"https://ipeagit.github.io/gtfstools/dev/reference/get_parent_station.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get parent stations recursively — get_parent_station","text":"data.table containing stop_ids parent_stations. stop parent, correspondent parent_station entry marked \"\".","code":""},{"path":[]},{"path":"https://ipeagit.github.io/gtfstools/dev/reference/get_parent_station.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get parent stations recursively — get_parent_station","text":"","code":"data_path <- system.file(\"extdata/ggl_gtfs.zip\", package = \"gtfstools\")  gtfs <- read_gtfs(data_path)  parents <- get_parent_station(gtfs) head(parents) #>    stop_id parent_station #>     <char>         <char> #> 1:     F12                #> 2:      E1            F12 #> 3:      E2            F12 #> 4:      E3            F12 #> 5:      E4            F12 #> 6:      E5            F12  # use the stop_id argument to control which stops are analyzed parents <- get_parent_station(gtfs, c(\"B1\", \"B2\")) parents #>    stop_id parent_station #>     <char>         <char> #> 1:      B1           F12S #> 2:      B2           F12N #> 3:    F12S            F12 #> 4:    F12N            F12 #> 5:     F12"},{"path":"https://ipeagit.github.io/gtfstools/dev/reference/get_stop_times_patterns.html","id":null,"dir":"Reference","previous_headings":"","what":"Get stop times patterns — get_stop_times_patterns","title":"Get stop times patterns — get_stop_times_patterns","text":"Identifies spatial spatiotemporal patterns within stop_times table. Please see details understand \"pattern\" means cases.","code":""},{"path":"https://ipeagit.github.io/gtfstools/dev/reference/get_stop_times_patterns.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get stop times patterns — get_stop_times_patterns","text":"","code":"get_stop_times_patterns(   gtfs,   trip_id = NULL,   type = \"spatial\",   sort_sequence = FALSE )"},{"path":"https://ipeagit.github.io/gtfstools/dev/reference/get_stop_times_patterns.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get stop times patterns — get_stop_times_patterns","text":"gtfs GTFS object, created read_gtfs(). trip_id character vector including trip_ids stop_times entries analyzed. NULL (default), function analyses pattern every trip_id GTFS. type string specifying type patterns analyzed. Either \"spatial\" (default) \"spatiotemporal\". sort_sequence logical specifying whether sort timetables stop_sequence. Defaults FALSE, otherwise spec-compliant feeds, timetables points already ordered stop_sequence, penalized longer processing times. Pattern identification based unordered timetables may result multiple ids identifying pattern, table ordered.","code":""},{"path":"https://ipeagit.github.io/gtfstools/dev/reference/get_stop_times_patterns.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get stop times patterns — get_stop_times_patterns","text":"data.table associating trip_id pattern_id.","code":""},{"path":"https://ipeagit.github.io/gtfstools/dev/reference/get_stop_times_patterns.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Get stop times patterns — get_stop_times_patterns","text":"Two trips assigned spatial pattern_id travel along sequence stops. assigned spatiotemporal pattern_id, hand, travel along sequence stops take time stops. Please note , case, time stops taken account, time trip started ignored (e.g. two trips depart stop follow sequence stops arrive stop B, taking 1 hour , spatiotemporal pattern considered , even one departed 6 another 7 ). Please also note stop_sequence field currently ignored - means two stops considered follow sequence one listed right stop_times table (e.g. trip X lists stops followed stop B stop_sequences 1 2, trip Y lists stops followed stop B stop_sequences 1 3, assigned pattern_id).","code":""},{"path":"https://ipeagit.github.io/gtfstools/dev/reference/get_stop_times_patterns.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get stop times patterns — get_stop_times_patterns","text":"","code":"data_path <- system.file(\"extdata/ber_gtfs.zip\", package = \"gtfstools\")  gtfs <- read_gtfs(data_path)  patterns <- get_stop_times_patterns(gtfs) head(patterns) #> Key: <trip_id> #>      trip_id pattern_id #>       <char>      <int> #> 1: 143765655          1 #> 2: 143765656          2 #> 3: 143765658          3 #> 4: 143765659          3 #> 5: 143765660          3 #> 6: 143765661          3  # use the trip_id argument to control which trips are analyzed patterns <- get_stop_times_patterns(   gtfs,   trip_id = c(\"143765658\", \"143765659\", \"143765660\") ) patterns #> Key: <trip_id> #>      trip_id pattern_id #>       <char>      <int> #> 1: 143765658          1 #> 2: 143765659          1 #> 3: 143765660          1  # use the type argument to control the type of pattern analyzed patterns <- get_stop_times_patterns(   gtfs,   trip_id = c(\"143765658\", \"143765659\", \"143765660\"),   type = \"spatiotemporal\" ) patterns #> Key: <trip_id> #>      trip_id pattern_id #>       <char>      <int> #> 1: 143765658          1 #> 2: 143765659          2 #> 3: 143765660          2"},{"path":"https://ipeagit.github.io/gtfstools/dev/reference/get_trip_duration.html","id":null,"dir":"Reference","previous_headings":"","what":"Get trip duration — get_trip_duration","title":"Get trip duration — get_trip_duration","text":"Returns duration specified trip_id.","code":""},{"path":"https://ipeagit.github.io/gtfstools/dev/reference/get_trip_duration.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get trip duration — get_trip_duration","text":"","code":"get_trip_duration(gtfs, trip_id = NULL, unit = \"min\")"},{"path":"https://ipeagit.github.io/gtfstools/dev/reference/get_trip_duration.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get trip duration — get_trip_duration","text":"gtfs GTFS object, created read_gtfs(). trip_id string vector including trip_ids duration calculated. NULL (default) function calculates duration every trip_id GTFS. unit string representing time unit duration desired. One \"s\" (seconds), \"min\" (minutes, default), \"h\" (hours) \"d\" (days).","code":""},{"path":"https://ipeagit.github.io/gtfstools/dev/reference/get_trip_duration.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get trip duration — get_trip_duration","text":"data.table containing duration specified trip.","code":""},{"path":"https://ipeagit.github.io/gtfstools/dev/reference/get_trip_duration.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Get trip duration — get_trip_duration","text":"duration trip defined time difference last arrival time first departure time, specified stop_times table.","code":""},{"path":"https://ipeagit.github.io/gtfstools/dev/reference/get_trip_duration.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get trip duration — get_trip_duration","text":"","code":"data_path <- system.file(\"extdata/spo_gtfs.zip\", package = \"gtfstools\")  gtfs <- read_gtfs(data_path)  trip_duration <- get_trip_duration(gtfs) head(trip_duration) #> Key: <trip_id> #>      trip_id duration #>       <char>    <num> #> 1: 2002-10-0       48 #> 2: 2105-10-0      108 #> 3: 2105-10-1      111 #> 4: 2161-10-0       94 #> 5: 2161-10-1       93 #> 6: 4491-10-0       69  trip_ids <- c(\"CPTM L07-0\", \"2002-10-0\") trip_duration <- get_trip_duration(gtfs, trip_id = trip_ids) trip_duration #> Key: <trip_id> #>       trip_id duration #>        <char>    <num> #> 1:  2002-10-0       48 #> 2: CPTM L07-0      136  trip_duration <- get_trip_duration(gtfs, trip_id = trip_ids, unit = \"h\") trip_duration #> Key: <trip_id> #>       trip_id duration #>        <char>    <num> #> 1:  2002-10-0 0.800000 #> 2: CPTM L07-0 2.266667"},{"path":"https://ipeagit.github.io/gtfstools/dev/reference/get_trip_geometry.html","id":null,"dir":"Reference","previous_headings":"","what":"Get trip geometry — get_trip_geometry","title":"Get trip geometry — get_trip_geometry","text":"Returns geometry specified trip_id, based either shapes stop_times file ().","code":""},{"path":"https://ipeagit.github.io/gtfstools/dev/reference/get_trip_geometry.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get trip geometry — get_trip_geometry","text":"","code":"get_trip_geometry(   gtfs,   trip_id = NULL,   file = NULL,   crs = 4326,   sort_sequence = FALSE )"},{"path":"https://ipeagit.github.io/gtfstools/dev/reference/get_trip_geometry.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get trip geometry — get_trip_geometry","text":"gtfs GTFS object, created read_gtfs(). trip_id character vector including trip_ids geometries generated. NULL (default), function generates geometries every trip_id GTFS. file character vector specifying file geometries generated (either one shapes stop_times). NULL (default), function attemps generate geometries files, raises error none files exist. crs CRS resulting object, either EPSG code crs object. Defaults 4326 (WGS 84). sort_sequence logical specifying whether sort shapes timetables shape_pt_sequence stop_sequence, respectively. Defaults FALSE, otherwise spec-compliant feeds, shape/timetables points already ordered shape_pt_sequence/stop_sequence, penalized longer processing times. Geometries generated unordered sequences correctly depict trip trajectories.","code":""},{"path":"https://ipeagit.github.io/gtfstools/dev/reference/get_trip_geometry.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get trip geometry — get_trip_geometry","text":"LINESTRING sf.","code":""},{"path":"https://ipeagit.github.io/gtfstools/dev/reference/get_trip_geometry.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Get trip geometry — get_trip_geometry","text":"geometry generation works differently two files. case shapes, shape described text file converted sf object. stop_times geometry result linking subsequent stops along straight line (stops' coordinates retrieved stops file). Thus, resolution geometry generated shapes tends much higher created stop_times.","code":""},{"path":"https://ipeagit.github.io/gtfstools/dev/reference/get_trip_geometry.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get trip geometry — get_trip_geometry","text":"","code":"data_path <- system.file(\"extdata/spo_gtfs.zip\", package = \"gtfstools\")  gtfs <- read_gtfs(data_path)  trip_geometry <- get_trip_geometry(gtfs) head(trip_geometry) #> Simple feature collection with 6 features and 2 fields #> Geometry type: LINESTRING #> Dimension:     XY #> Bounding box:  xmin: -46.98404 ymin: -23.73644 xmax: -46.63535 ymax: -23.19474 #> Geodetic CRS:  WGS 84 #>      trip_id origin_file                       geometry #> 1 CPTM L07-0      shapes LINESTRING (-46.63535 -23.5... #> 2 CPTM L07-1      shapes LINESTRING (-46.87255 -23.1... #> 3 CPTM L08-0      shapes LINESTRING (-46.64073 -23.5... #> 4 CPTM L08-1      shapes LINESTRING (-46.98404 -23.5... #> 5 CPTM L09-0      shapes LINESTRING (-46.77604 -23.5... #> 6 CPTM L09-1      shapes LINESTRING (-46.69711 -23.7...  # the above is identical to trip_geometry <- get_trip_geometry(gtfs, file = c(\"shapes\", \"stop_times\")) head(trip_geometry) #> Simple feature collection with 6 features and 2 fields #> Geometry type: LINESTRING #> Dimension:     XY #> Bounding box:  xmin: -46.98404 ymin: -23.73644 xmax: -46.63535 ymax: -23.19474 #> Geodetic CRS:  WGS 84 #>      trip_id origin_file                       geometry #> 1 CPTM L07-0      shapes LINESTRING (-46.63535 -23.5... #> 2 CPTM L07-1      shapes LINESTRING (-46.87255 -23.1... #> 3 CPTM L08-0      shapes LINESTRING (-46.64073 -23.5... #> 4 CPTM L08-1      shapes LINESTRING (-46.98404 -23.5... #> 5 CPTM L09-0      shapes LINESTRING (-46.77604 -23.5... #> 6 CPTM L09-1      shapes LINESTRING (-46.69711 -23.7...  trip_ids <- c(\"CPTM L07-0\", \"2002-10-0\") trip_geometry <- get_trip_geometry(gtfs, trip_id = trip_ids) trip_geometry #> Simple feature collection with 4 features and 2 fields #> Geometry type: LINESTRING #> Dimension:     XY #> Bounding box:  xmin: -46.87255 ymin: -23.55262 xmax: -46.62922 ymax: -23.19474 #> Geodetic CRS:  WGS 84 #>      trip_id origin_file                       geometry #> 1 CPTM L07-0      shapes LINESTRING (-46.63535 -23.5... #> 2  2002-10-0      shapes LINESTRING (-46.62963 -23.5... #> 3 CPTM L07-0  stop_times LINESTRING (-46.63544 -23.5... #> 4  2002-10-0  stop_times LINESTRING (-46.62962 -23.5... plot(trip_geometry[\"origin_file\"])"},{"path":"https://ipeagit.github.io/gtfstools/dev/reference/get_trip_length.html","id":null,"dir":"Reference","previous_headings":"","what":"Get trip length — get_trip_length","title":"Get trip length — get_trip_length","text":"Returns length specified trip_id, based either shapes stop_times file ().","code":""},{"path":"https://ipeagit.github.io/gtfstools/dev/reference/get_trip_length.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get trip length — get_trip_length","text":"","code":"get_trip_length(   gtfs,   trip_id = NULL,   file = NULL,   unit = \"km\",   sort_sequence = FALSE )"},{"path":"https://ipeagit.github.io/gtfstools/dev/reference/get_trip_length.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get trip length — get_trip_length","text":"gtfs GTFS object, created read_gtfs(). trip_id character vector including trip_ids length calculated NULL (default), function calculates length trip_id GTFS. file character vector specifying file lengths calculated (either one shapes stop_times). NULL (default), function attempts calculate lengths files, raises error none files exist. unit string representing unit lengths desired. Either \"km\" (default) \"m\". sort_sequence logical specifying whether sort shapes timetables shape_pt_sequence stop_sequence, respectively. Defaults FALSE, otherwise spec-compliant feeds, shape/timetables points already ordered shape_pt_sequence/stop_sequence, penalized longer processing times. Lengths calculated trip trajectories generated unordered sequences correctly depict actual trip lengths.","code":""},{"path":"https://ipeagit.github.io/gtfstools/dev/reference/get_trip_length.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get trip length — get_trip_length","text":"data.table containing length specified trip.","code":""},{"path":"https://ipeagit.github.io/gtfstools/dev/reference/get_trip_length.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Get trip length — get_trip_length","text":"Please check get_trip_geometry() documentation understand geometry generation, consequently length calculation, differs depending chosen file.","code":""},{"path":"https://ipeagit.github.io/gtfstools/dev/reference/get_trip_length.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get trip length — get_trip_length","text":"","code":"data_path <- system.file(\"extdata/spo_gtfs.zip\", package = \"gtfstools\")  gtfs <- read_gtfs(data_path)  trip_length <- get_trip_length(gtfs) head(trip_length) #>       trip_id   length origin_file #>        <char>    <num>      <char> #> 1: CPTM L07-0 60.71894      shapes #> 2: CPTM L07-1 60.71894      shapes #> 3: CPTM L08-0 41.79037      shapes #> 4: CPTM L08-1 41.79037      shapes #> 5: CPTM L09-0 31.88906      shapes #> 6: CPTM L09-1 31.88906      shapes  # the above is identical to trip_length <- get_trip_length(gtfs, file = c(\"shapes\", \"stop_times\")) head(trip_length) #>       trip_id   length origin_file #>        <char>    <num>      <char> #> 1: CPTM L07-0 60.71894      shapes #> 2: CPTM L07-1 60.71894      shapes #> 3: CPTM L08-0 41.79037      shapes #> 4: CPTM L08-1 41.79037      shapes #> 5: CPTM L09-0 31.88906      shapes #> 6: CPTM L09-1 31.88906      shapes  trip_ids <- c(\"CPTM L07-0\", \"2002-10-0\") trip_length <- get_trip_length(gtfs, trip_id = trip_ids) trip_length #>       trip_id    length origin_file #>        <char>     <num>      <char> #> 1: CPTM L07-0 60.718942      shapes #> 2:  2002-10-0  7.162009      shapes #> 3: CPTM L07-0 55.176541  stop_times #> 4:  2002-10-0  5.247691  stop_times"},{"path":"https://ipeagit.github.io/gtfstools/dev/reference/get_trip_segment_duration.html","id":null,"dir":"Reference","previous_headings":"","what":"Get trip segments' duration — get_trip_segment_duration","title":"Get trip segments' duration — get_trip_segment_duration","text":"Returns duration segments stops specified trip_id.","code":""},{"path":"https://ipeagit.github.io/gtfstools/dev/reference/get_trip_segment_duration.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get trip segments' duration — get_trip_segment_duration","text":"","code":"get_trip_segment_duration(   gtfs,   trip_id = NULL,   unit = \"min\",   sort_sequence = FALSE )"},{"path":"https://ipeagit.github.io/gtfstools/dev/reference/get_trip_segment_duration.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get trip segments' duration — get_trip_segment_duration","text":"gtfs GTFS object, created read_gtfs(). trip_id string vector including trip_ids segments' duration calculated. NULL (default) function calculates segments' duration every trip_id GTFS. unit string representing time unit duration desired. One \"s\" (seconds), \"min\" (minutes, default), \"h\" (hours) \"d\" (days). sort_sequence logical specifying whether sort timetables stop_sequence. Defaults FALSE, otherwise spec-compliant feeds, timetables points already ordered stop_sequence, penalized longer processing times. Durations calculated unordered timetables correctly depict real life segment durations.","code":""},{"path":"https://ipeagit.github.io/gtfstools/dev/reference/get_trip_segment_duration.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get trip segments' duration — get_trip_segment_duration","text":"data.table containing segments' duration specified trip.","code":""},{"path":"https://ipeagit.github.io/gtfstools/dev/reference/get_trip_segment_duration.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Get trip segments' duration — get_trip_segment_duration","text":"trip segment defined path two subsequent stops trip.  duration segment defined time difference arrival time departure time, specified stop_times file.","code":""},{"path":"https://ipeagit.github.io/gtfstools/dev/reference/get_trip_segment_duration.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get trip segments' duration — get_trip_segment_duration","text":"","code":"data_path <- system.file(\"extdata/spo_gtfs.zip\", package = \"gtfstools\")  gtfs <- read_gtfs(data_path)  trip_segment_dur <- get_trip_segment_duration(gtfs) head(trip_segment_dur) #>       trip_id segment duration #>        <char>   <int>    <num> #> 1: CPTM L07-0       1        8 #> 2: CPTM L07-0       2        8 #> 3: CPTM L07-0       3        8 #> 4: CPTM L07-0       4        8 #> 5: CPTM L07-0       5        8 #> 6: CPTM L07-0       6        8  # use the trip_id argument to control which trips are analyzed trip_segment_dur <- get_trip_segment_duration(gtfs, trip_id = \"CPTM L07-0\") trip_segment_dur #>        trip_id segment duration #>         <char>   <int>    <num> #>  1: CPTM L07-0       1        8 #>  2: CPTM L07-0       2        8 #>  3: CPTM L07-0       3        8 #>  4: CPTM L07-0       4        8 #>  5: CPTM L07-0       5        8 #>  6: CPTM L07-0       6        8 #>  7: CPTM L07-0       7        8 #>  8: CPTM L07-0       8        8 #>  9: CPTM L07-0       9        8 #> 10: CPTM L07-0      10        8 #> 11: CPTM L07-0      11        8 #> 12: CPTM L07-0      12        8 #> 13: CPTM L07-0      13        8 #> 14: CPTM L07-0      14        8 #> 15: CPTM L07-0      15        8 #> 16: CPTM L07-0      16        8 #> 17: CPTM L07-0      17        8  # use the unit argument to control in which unit the durations are calculated trip_segment_dur <- get_trip_segment_duration(gtfs, \"CPTM L07-0\", unit = \"s\") trip_segment_dur #>        trip_id segment duration #>         <char>   <int>    <int> #>  1: CPTM L07-0       1      480 #>  2: CPTM L07-0       2      480 #>  3: CPTM L07-0       3      480 #>  4: CPTM L07-0       4      480 #>  5: CPTM L07-0       5      480 #>  6: CPTM L07-0       6      480 #>  7: CPTM L07-0       7      480 #>  8: CPTM L07-0       8      480 #>  9: CPTM L07-0       9      480 #> 10: CPTM L07-0      10      480 #> 11: CPTM L07-0      11      480 #> 12: CPTM L07-0      12      480 #> 13: CPTM L07-0      13      480 #> 14: CPTM L07-0      14      480 #> 15: CPTM L07-0      15      480 #> 16: CPTM L07-0      16      480 #> 17: CPTM L07-0      17      480"},{"path":"https://ipeagit.github.io/gtfstools/dev/reference/get_trip_speed.html","id":null,"dir":"Reference","previous_headings":"","what":"Get trip speed — get_trip_speed","title":"Get trip speed — get_trip_speed","text":"Returns speed specified trip_id, based geometry created either shapes stop_times file ().","code":""},{"path":"https://ipeagit.github.io/gtfstools/dev/reference/get_trip_speed.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get trip speed — get_trip_speed","text":"","code":"get_trip_speed(   gtfs,   trip_id = NULL,   file = \"shapes\",   unit = \"km/h\",   sort_sequence = FALSE )"},{"path":"https://ipeagit.github.io/gtfstools/dev/reference/get_trip_speed.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get trip speed — get_trip_speed","text":"gtfs GTFS object, created read_gtfs(). trip_id character vector including trip_ids speeds calculated. NULL (default), function calculates speed every trip_id GTFS. file file geometries generated, either shapes stop_times (geometries used calculate length trip). Defaults shapes. unit string representing unit speeds desired. Either \"km/h\" (default) \"m/s\". sort_sequence Ultimately passed get_trip_length(), logical specifying whether sort shapes timetables shape_pt_sequence stop_sequence, respectively. Speeds calculated trip trajectories generated unordered sequences correctly depict actual trip speeds. Defaults FALSE, otherwise spec-compliant feeds, shape/timetables points already ordered shape_pt_sequence/stop_sequence, penalized longer processing times.","code":""},{"path":"https://ipeagit.github.io/gtfstools/dev/reference/get_trip_speed.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get trip speed — get_trip_speed","text":"data.table containing duration specified trip file geometries generated.","code":""},{"path":"https://ipeagit.github.io/gtfstools/dev/reference/get_trip_speed.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Get trip speed — get_trip_speed","text":"Please check get_trip_geometry() documentation understand geometry generation differs depending chosen file.","code":""},{"path":[]},{"path":"https://ipeagit.github.io/gtfstools/dev/reference/get_trip_speed.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get trip speed — get_trip_speed","text":"","code":"data_path <- system.file(\"extdata/spo_gtfs.zip\", package = \"gtfstools\")  gtfs <- read_gtfs(data_path)  trip_speed <- get_trip_speed(gtfs) head(trip_speed) #>      trip_id origin_file     speed #>       <char>      <char>     <num> #> 1: 2002-10-0      shapes  8.952511 #> 2: 2105-10-0      shapes 10.253365 #> 3: 2105-10-1      shapes  9.795292 #> 4: 2161-10-0      shapes 11.182534 #> 5: 2161-10-1      shapes 11.784458 #> 6: 4491-10-0      shapes 13.203560  trip_ids <- c(\"CPTM L07-0\", \"2002-10-0\") trip_speed <- get_trip_speed(gtfs, trip_ids) trip_speed #>       trip_id origin_file     speed #>        <char>      <char>     <num> #> 1:  2002-10-0      shapes  8.952511 #> 2: CPTM L07-0      shapes 26.787768  trip_speed <- get_trip_speed(   gtfs,   trip_ids,   file = c(\"shapes\", \"stop_times\") ) trip_speed #>       trip_id origin_file     speed #>        <char>      <char>     <num> #> 1:  2002-10-0      shapes  8.952511 #> 2:  2002-10-0  stop_times  6.559614 #> 3: CPTM L07-0      shapes 26.787768 #> 4: CPTM L07-0  stop_times 24.342591  trip_speed <- get_trip_speed(gtfs, trip_ids, unit = \"m/s\") trip_speed #>       trip_id origin_file    speed #>        <char>      <char>    <num> #> 1:  2002-10-0      shapes 2.486809 #> 2: CPTM L07-0      shapes 7.441047"},{"path":"https://ipeagit.github.io/gtfstools/dev/reference/gtfstools.html","id":null,"dir":"Reference","previous_headings":"","what":"gtfstools: General Transit Feed Specification (GTFS) Editing and Analysing Tools — gtfstools","title":"gtfstools: General Transit Feed Specification (GTFS) Editing and Analysing Tools — gtfstools","text":"Utility functions read, manipulate, analyse write transit feeds General Transit Feed Specification (GTFS) data format.","code":""},{"path":"https://ipeagit.github.io/gtfstools/dev/reference/gtfstools.html","id":"usage","dir":"Reference","previous_headings":"","what":"Usage","title":"gtfstools: General Transit Feed Specification (GTFS) Editing and Analysing Tools — gtfstools","text":"Please check vignettes package usage: Basic usage: reading, analysing, manipulating writing feeds. Run vignette(\"gtfstools\") check website. Filtering GTFS feeds. Run vignette(\"filtering\", package = \"gtfstools\") check website. Validating GTFS feeds. Run vignette(\"validating\", package = \"gtfstools\") check website.","code":""},{"path":[]},{"path":"https://ipeagit.github.io/gtfstools/dev/reference/gtfstools.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"gtfstools: General Transit Feed Specification (GTFS) Editing and Analysing Tools — gtfstools","text":"Maintainer: Daniel Herszenhut dhersz@gmail.com (ORCID) Authors: Rafael H. M. Pereira (ORCID) Pedro R. Andrade (ORCID) Joao Bazzo (ORCID) contributors: Mark Padgham [contributor] Marcus Saraiva (ORCID) [contributor] Ipea - Institute Applied Economic Research [copyright holder, funder]","code":""},{"path":"https://ipeagit.github.io/gtfstools/dev/reference/integer_to_date.html","id":null,"dir":"Reference","previous_headings":"","what":"Convert an integer vector into a Date vector — integer_to_date","title":"Convert an integer vector into a Date vector — integer_to_date","text":"Convert integer vector Date vector","code":""},{"path":"https://ipeagit.github.io/gtfstools/dev/reference/integer_to_date.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Convert an integer vector into a Date vector — integer_to_date","text":"","code":"integer_to_date(field)"},{"path":"https://ipeagit.github.io/gtfstools/dev/reference/merge_gtfs.html","id":null,"dir":"Reference","previous_headings":"","what":"Merge GTFS files — merge_gtfs","title":"Merge GTFS files — merge_gtfs","text":"Combines many GTFS objects single one.","code":""},{"path":"https://ipeagit.github.io/gtfstools/dev/reference/merge_gtfs.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Merge GTFS files — merge_gtfs","text":"","code":"merge_gtfs(..., files = NULL, prefix = FALSE)"},{"path":"https://ipeagit.github.io/gtfstools/dev/reference/merge_gtfs.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Merge GTFS files — merge_gtfs","text":"... GTFS objects merged. argument can either GTFS list GTFS objects. files character vector listing GTFS tables merged. NULL (default), tables merged. prefix Either logical character vector (defaults FALSE). Whether add prefix value id fields identify GTFS object value comes . TRUE, prefixes range \"1\" n, n number objects passed function. character vector, elements used identify GTFS objects, length vector must equal total amount objects passed ... (first element identify first GTFS, second element second GTFS, ).","code":""},{"path":"https://ipeagit.github.io/gtfstools/dev/reference/merge_gtfs.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Merge GTFS files — merge_gtfs","text":"GTFS object table combination (row) tables specified GTFS objects.","code":""},{"path":"https://ipeagit.github.io/gtfstools/dev/reference/merge_gtfs.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Merge GTFS files — merge_gtfs","text":"","code":"spo_path <- system.file(\"extdata/spo_gtfs.zip\", package = \"gtfstools\") ggl_path <- system.file(\"extdata/ggl_gtfs.zip\", package = \"gtfstools\")  spo_gtfs <- read_gtfs(spo_path) names(spo_gtfs) #> [1] \"agency\"      \"calendar\"    \"frequencies\" \"routes\"      \"shapes\"      #> [6] \"stop_times\"  \"stops\"       \"trips\"        ggl_gtfs <- read_gtfs(ggl_path) names(ggl_gtfs) #>  [1] \"calendar_dates\"  \"fare_attributes\" \"fare_rules\"      \"feed_info\"       #>  [5] \"frequencies\"     \"levels\"          \"pathways\"        \"routes\"          #>  [9] \"shapes\"          \"stop_times\"      \"stops\"           \"transfers\"       #> [13] \"translations\"    \"trips\"           \"agency\"          \"attributions\"    #> [17] \"calendar\"         merged_gtfs <- merge_gtfs(spo_gtfs, ggl_gtfs) names(merged_gtfs) #>  [1] \"agency\"          \"calendar\"        \"frequencies\"     \"routes\"          #>  [5] \"shapes\"          \"stop_times\"      \"stops\"           \"trips\"           #>  [9] \"calendar_dates\"  \"fare_attributes\" \"fare_rules\"      \"feed_info\"       #> [13] \"levels\"          \"pathways\"        \"transfers\"       \"translations\"    #> [17] \"attributions\"     # use a list() to programatically merge many GTFS objects gtfs_list <- list(spo_gtfs, ggl_gtfs) merged_gtfs <- merge_gtfs(gtfs_list)  # 'prefix' helps disambiguating from which GTFS each id comes from. # if TRUE, the ids range from 1:n, where n is the number of gtfs merged_gtfs <- merge_gtfs(gtfs_list, prefix = TRUE) merged_gtfs$agency #>      agency_id    agency_name                               agency_url #>         <char>         <char>                                   <char> #> 1:         1_1        SPTRANS http://www.sptrans.com.br/?versao=011019 #> 2:         1_1        SPTRANS http://www.sptrans.com.br/?versao=011019 #> 3: 2_agency001 Transit Agency       http://www.transitcommuterbus.com/ #>      agency_timezone agency_lang #>               <char>      <char> #> 1: America/Sao_Paulo          pt #> 2: America/Sao_Paulo          pt #> 3:               PST          en  # if a character vector, its elements will be used to identify the each gtfs merged_gtfs <- merge_gtfs(gtfs_list, prefix = c(\"spo\", \"ggl\")) merged_gtfs$agency #>        agency_id    agency_name                               agency_url #>           <char>         <char>                                   <char> #> 1:         spo_1        SPTRANS http://www.sptrans.com.br/?versao=011019 #> 2:         spo_1        SPTRANS http://www.sptrans.com.br/?versao=011019 #> 3: ggl_agency001 Transit Agency       http://www.transitcommuterbus.com/ #>      agency_timezone agency_lang #>               <char>      <char> #> 1: America/Sao_Paulo          pt #> 2: America/Sao_Paulo          pt #> 3:               PST          en"},{"path":"https://ipeagit.github.io/gtfstools/dev/reference/read_gtfs.html","id":null,"dir":"Reference","previous_headings":"","what":"Read GTFS files — read_gtfs","title":"Read GTFS files — read_gtfs","text":"Reads GTFS text files either local .zip file URL.","code":""},{"path":"https://ipeagit.github.io/gtfstools/dev/reference/read_gtfs.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Read GTFS files — read_gtfs","text":"","code":"read_gtfs(   path,   files = NULL,   fields = NULL,   skip = NULL,   quiet = TRUE,   encoding = \"unknown\" )"},{"path":"https://ipeagit.github.io/gtfstools/dev/reference/read_gtfs.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Read GTFS files — read_gtfs","text":"path path GTFS .zip file. files character vector containing text files read GTFS (without .txt extension). NULL (default) existing files read. fields named list containing fields read text file, format list(file = c(\"field1\", \"field2\")). NULL (default), fields files specified files read. file specified files fields, fields file read (.e. may specify fields files whose fields want subset). skip character vector containing text files read GTFS, without .txt extension. NULL (default), files skipped. used files already set. quiet Whether hide log messages progress bars (defaults TRUE). encoding string, ultimately passed data.table::fread(). Defaults \"unknown\". possible options \"UTF-8\" \"Latin-1\". Please note used re-encode input, enable handling encoded strings native encoding.","code":""},{"path":"https://ipeagit.github.io/gtfstools/dev/reference/read_gtfs.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Read GTFS files — read_gtfs","text":"data.table-based GTFS object: list data.tables table represents GTFS text file.","code":""},{"path":"https://ipeagit.github.io/gtfstools/dev/reference/read_gtfs.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Read GTFS files — read_gtfs","text":"column types data.table final GTFS object conform closely possible Google's Static GTFS Reference. Exceptions date-related columns (calendar.txt's start_date end_date, example), converted Date objects, instead kept integers, allowing easier data manipulation. columns converted back integers writing GTFS object .zip file using write_gtfs().","code":""},{"path":[]},{"path":"https://ipeagit.github.io/gtfstools/dev/reference/read_gtfs.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Read GTFS files — read_gtfs","text":"","code":"data_path <- system.file(\"extdata/spo_gtfs.zip\", package = \"gtfstools\")  gtfs <- read_gtfs(data_path) names(gtfs) #> [1] \"agency\"      \"calendar\"    \"frequencies\" \"routes\"      \"shapes\"      #> [6] \"stop_times\"  \"stops\"       \"trips\"        gtfs <- read_gtfs(data_path, files = c(\"trips\", \"stop_times\")) names(gtfs) #> [1] \"trips\"      \"stop_times\"  gtfs <- read_gtfs(data_path, skip = \"trips\") names(gtfs) #> [1] \"agency\"      \"calendar\"    \"frequencies\" \"routes\"      \"shapes\"      #> [6] \"stop_times\"  \"stops\"        gtfs <- read_gtfs(data_path, fields = list(agency = \"agency_id\")) names(gtfs) #> [1] \"agency\"      \"calendar\"    \"frequencies\" \"routes\"      \"shapes\"      #> [6] \"stop_times\"  \"stops\"       \"trips\"       names(gtfs$agency) #> [1] \"agency_id\""},{"path":"https://ipeagit.github.io/gtfstools/dev/reference/remove_duplicates.html","id":null,"dir":"Reference","previous_headings":"","what":"Remove duplicated entries — remove_duplicates","title":"Remove duplicated entries — remove_duplicates","text":"Removes duplicated entries GTFS objects tables.","code":""},{"path":"https://ipeagit.github.io/gtfstools/dev/reference/remove_duplicates.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Remove duplicated entries — remove_duplicates","text":"","code":"remove_duplicates(gtfs)"},{"path":"https://ipeagit.github.io/gtfstools/dev/reference/remove_duplicates.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Remove duplicated entries — remove_duplicates","text":"gtfs GTFS object, created read_gtfs().","code":""},{"path":"https://ipeagit.github.io/gtfstools/dev/reference/remove_duplicates.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Remove duplicated entries — remove_duplicates","text":"GTFS object containing unique entries.","code":""},{"path":"https://ipeagit.github.io/gtfstools/dev/reference/remove_duplicates.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Remove duplicated entries — remove_duplicates","text":"","code":"data_path <- system.file(\"extdata/spo_gtfs.zip\", package = \"gtfstools\") gtfs <- read_gtfs(data_path)  # this gtfs includes some duplicated entries gtfs$agency #>    agency_id agency_name                               agency_url #>       <char>      <char>                                   <char> #> 1:         1     SPTRANS http://www.sptrans.com.br/?versao=011019 #> 2:         1     SPTRANS http://www.sptrans.com.br/?versao=011019 #>      agency_timezone agency_lang #>               <char>      <char> #> 1: America/Sao_Paulo          pt #> 2: America/Sao_Paulo          pt  gtfs <- remove_duplicates(gtfs) gtfs$agency #>    agency_id agency_name                               agency_url #>       <char>      <char>                                   <char> #> 1:         1     SPTRANS http://www.sptrans.com.br/?versao=011019 #>      agency_timezone agency_lang #>               <char>      <char> #> 1: America/Sao_Paulo          pt"},{"path":"https://ipeagit.github.io/gtfstools/dev/reference/seconds_to_string.html","id":null,"dir":"Reference","previous_headings":"","what":"Convert seconds after midnight to time string — seconds_to_string","title":"Convert seconds after midnight to time string — seconds_to_string","text":"Converts seconds midnight integers strings \"HH:MM:SS\" format.","code":""},{"path":"https://ipeagit.github.io/gtfstools/dev/reference/seconds_to_string.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Convert seconds after midnight to time string — seconds_to_string","text":"","code":"seconds_to_string(seconds)"},{"path":"https://ipeagit.github.io/gtfstools/dev/reference/seconds_to_string.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Convert seconds after midnight to time string — seconds_to_string","text":"seconds integer.","code":""},{"path":"https://ipeagit.github.io/gtfstools/dev/reference/seconds_to_string.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Convert seconds after midnight to time string — seconds_to_string","text":"time-representing string.","code":""},{"path":"https://ipeagit.github.io/gtfstools/dev/reference/set_trip_speed.html","id":null,"dir":"Reference","previous_headings":"","what":"Set trip average speed — set_trip_speed","title":"Set trip average speed — set_trip_speed","text":"Sets average speed specified trip_id changing arrival_time departure_time columns stop_times.","code":""},{"path":"https://ipeagit.github.io/gtfstools/dev/reference/set_trip_speed.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Set trip average speed — set_trip_speed","text":"","code":"set_trip_speed(gtfs, trip_id, speed, unit = \"km/h\", by_reference = FALSE)"},{"path":"https://ipeagit.github.io/gtfstools/dev/reference/set_trip_speed.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Set trip average speed — set_trip_speed","text":"gtfs GTFS object, created read_gtfs(). trip_id string vector including trip_ids average speed set. speed numeric representing speed set. length must either equal 1, case value recycled trip_ids, equal trip_id's length. unit string representing unit speed given. One \"km/h\" (default) \"m/s\". by_reference Whether update stop_times' data.table reference. Defaults FALSE.","code":""},{"path":"https://ipeagit.github.io/gtfstools/dev/reference/set_trip_speed.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Set trip average speed — set_trip_speed","text":"by_reference set FALSE, returns GTFS object time columns stop_times adjusted. Else, returns GTFS object invisibly (note case original GTFS object altered).","code":""},{"path":"https://ipeagit.github.io/gtfstools/dev/reference/set_trip_speed.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Set trip average speed — set_trip_speed","text":"average speed calculated difference arrival time last stop minus departure time first top, trip's length (calculated via get_trip_geometry(), based shapes file). arrival departure times stops (.e. first neither last) set \"\", written NA write_gtfs(). transport routing software, OpenTripPlanner, support specifying stop times like . cases, estimate arrival/departure times others stops based average speed well. plan add feature function future.","code":""},{"path":"https://ipeagit.github.io/gtfstools/dev/reference/set_trip_speed.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Set trip average speed — set_trip_speed","text":"","code":"data_path <- system.file(\"extdata/spo_gtfs.zip\", package = \"gtfstools\")  gtfs <- read_gtfs(data_path)  gtfs_new_speed <- set_trip_speed(gtfs, trip_id = \"CPTM L07-0\", 50) gtfs_new_speed$stop_times[trip_id == \"CPTM L07-0\"] #>        trip_id arrival_time departure_time stop_id stop_sequence #>         <char>       <char>         <char>  <char>         <int> #>  1: CPTM L07-0     04:00:00       04:00:00   18940             1 #>  2: CPTM L07-0                               18920             2 #>  3: CPTM L07-0                               18919             3 #>  4: CPTM L07-0                               18917             4 #>  5: CPTM L07-0                               18916             5 #>  6: CPTM L07-0                               18965             6 #>  7: CPTM L07-0                               18923             7 #>  8: CPTM L07-0                               18922             8 #>  9: CPTM L07-0                             4114459             9 #> 10: CPTM L07-0                               18921            10 #> 11: CPTM L07-0                               18924            11 #> 12: CPTM L07-0                               18925            12 #> 13: CPTM L07-0                               18926            13 #> 14: CPTM L07-0                               18971            14 #> 15: CPTM L07-0                               18972            15 #> 16: CPTM L07-0                               18973            16 #> 17: CPTM L07-0                               18974            17 #> 18: CPTM L07-0     05:12:51       05:12:51   18975            18  # use the unit argument to change the speed unit gtfs_new_speed <- set_trip_speed(   gtfs,   trip_id = \"CPTM L07-0\",   speed = 15,   unit = \"m/s\" ) gtfs_new_speed$stop_times[trip_id == \"CPTM L07-0\"] #>        trip_id arrival_time departure_time stop_id stop_sequence #>         <char>       <char>         <char>  <char>         <int> #>  1: CPTM L07-0     04:00:00       04:00:00   18940             1 #>  2: CPTM L07-0                               18920             2 #>  3: CPTM L07-0                               18919             3 #>  4: CPTM L07-0                               18917             4 #>  5: CPTM L07-0                               18916             5 #>  6: CPTM L07-0                               18965             6 #>  7: CPTM L07-0                               18923             7 #>  8: CPTM L07-0                               18922             8 #>  9: CPTM L07-0                             4114459             9 #> 10: CPTM L07-0                               18921            10 #> 11: CPTM L07-0                               18924            11 #> 12: CPTM L07-0                               18925            12 #> 13: CPTM L07-0                               18926            13 #> 14: CPTM L07-0                               18971            14 #> 15: CPTM L07-0                               18972            15 #> 16: CPTM L07-0                               18973            16 #> 17: CPTM L07-0                               18974            17 #> 18: CPTM L07-0     05:07:27       05:07:27   18975            18  # original gtfs remains unchanged gtfs$stop_times[trip_id == \"CPTM L07-0\"] #>        trip_id arrival_time departure_time stop_id stop_sequence #>         <char>       <char>         <char>  <char>         <int> #>  1: CPTM L07-0     04:00:00       04:00:00   18940             1 #>  2: CPTM L07-0     04:08:00       04:08:00   18920             2 #>  3: CPTM L07-0     04:16:00       04:16:00   18919             3 #>  4: CPTM L07-0     04:24:00       04:24:00   18917             4 #>  5: CPTM L07-0     04:32:00       04:32:00   18916             5 #>  6: CPTM L07-0     04:40:00       04:40:00   18965             6 #>  7: CPTM L07-0     04:48:00       04:48:00   18923             7 #>  8: CPTM L07-0     04:56:00       04:56:00   18922             8 #>  9: CPTM L07-0     05:04:00       05:04:00 4114459             9 #> 10: CPTM L07-0     05:12:00       05:12:00   18921            10 #> 11: CPTM L07-0     05:20:00       05:20:00   18924            11 #> 12: CPTM L07-0     05:28:00       05:28:00   18925            12 #> 13: CPTM L07-0     05:36:00       05:36:00   18926            13 #> 14: CPTM L07-0     05:44:00       05:44:00   18971            14 #> 15: CPTM L07-0     05:52:00       05:52:00   18972            15 #> 16: CPTM L07-0     06:00:00       06:00:00   18973            16 #> 17: CPTM L07-0     06:08:00       06:08:00   18974            17 #> 18: CPTM L07-0     06:16:00       06:16:00   18975            18  # when doing by reference, original gtfs is changed set_trip_speed(gtfs, trip_id = \"CPTM L07-0\", 50, by_reference = TRUE) gtfs$stop_times[trip_id == \"CPTM L07-0\"] #>        trip_id arrival_time departure_time stop_id stop_sequence #>         <char>       <char>         <char>  <char>         <int> #>  1: CPTM L07-0     04:00:00       04:00:00   18940             1 #>  2: CPTM L07-0                               18920             2 #>  3: CPTM L07-0                               18919             3 #>  4: CPTM L07-0                               18917             4 #>  5: CPTM L07-0                               18916             5 #>  6: CPTM L07-0                               18965             6 #>  7: CPTM L07-0                               18923             7 #>  8: CPTM L07-0                               18922             8 #>  9: CPTM L07-0                             4114459             9 #> 10: CPTM L07-0                               18921            10 #> 11: CPTM L07-0                               18924            11 #> 12: CPTM L07-0                               18925            12 #> 13: CPTM L07-0                               18926            13 #> 14: CPTM L07-0                               18971            14 #> 15: CPTM L07-0                               18972            15 #> 16: CPTM L07-0                               18973            16 #> 17: CPTM L07-0                               18974            17 #> 18: CPTM L07-0     05:12:51       05:12:51   18975            18"},{"path":"https://ipeagit.github.io/gtfstools/dev/reference/string_to_seconds.html","id":null,"dir":"Reference","previous_headings":"","what":"Convert time string to seconds after midnight — string_to_seconds","title":"Convert time string to seconds after midnight — string_to_seconds","text":"Converts strings \"HH:MM:SS\" format seconds midnight.","code":""},{"path":"https://ipeagit.github.io/gtfstools/dev/reference/string_to_seconds.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Convert time string to seconds after midnight — string_to_seconds","text":"","code":"string_to_seconds(string)"},{"path":"https://ipeagit.github.io/gtfstools/dev/reference/string_to_seconds.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Convert time string to seconds after midnight — string_to_seconds","text":"string string \"HH:MM:SS\" format.","code":""},{"path":"https://ipeagit.github.io/gtfstools/dev/reference/string_to_seconds.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Convert time string to seconds after midnight — string_to_seconds","text":"seconds midnight given time string integer.","code":""},{"path":"https://ipeagit.github.io/gtfstools/dev/reference/validate_gtfs.html","id":null,"dir":"Reference","previous_headings":"","what":"Validate GTFS feed — validate_gtfs","title":"Validate GTFS feed — validate_gtfs","text":"Uses MobilityData's GTFS validator perform GTFS business rule validation. results available HTML report (validator v3.1.0 higher used) JSON format. Please check complete set rules used validation . Please note function requires working installation Java 11 higher work.","code":""},{"path":"https://ipeagit.github.io/gtfstools/dev/reference/validate_gtfs.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Validate GTFS feed — validate_gtfs","text":"","code":"validate_gtfs(   gtfs,   output_path,   validator_path,   overwrite = TRUE,   html_preview = TRUE,   pretty_json = FALSE,   quiet = TRUE,   n_threads = 1 )"},{"path":"https://ipeagit.github.io/gtfstools/dev/reference/validate_gtfs.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Validate GTFS feed — validate_gtfs","text":"gtfs GTFS validated. Can format GTFS object, path GTFS file, path directory URL feed. output_path string. path directory validator create results saved . validator_path string. path GTFS validator, previously downloaded download_validator(). overwrite logical. Whether overwrite existing validation results output_path. Defaults TRUE. html_preview logical. Whether show HTML report viewer, RStudio browser. Defaults TRUE (works interactive sessions). pretty_json logical. Whether JSON results printed readable way, allows inspected without manually formatting. Defaults FALSE. quiet logical. Whether hide informative messages. Defaults TRUE. n_threads integer 1 number cores running machine. Control many threads used validation. Defaults using one available cores.","code":""},{"path":"https://ipeagit.github.io/gtfstools/dev/reference/validate_gtfs.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Validate GTFS feed — validate_gtfs","text":"Invisibly returns normalized path directory validation results saved .","code":""},{"path":[]},{"path":"https://ipeagit.github.io/gtfstools/dev/reference/validate_gtfs.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Validate GTFS feed — validate_gtfs","text":"","code":"data_path <- system.file(\"extdata/spo_gtfs.zip\", package = \"gtfstools\") output_path <- tempfile(\"validation_result\") validator_path <- download_validator(tempdir()) gtfs <- read_gtfs(data_path)  validate_gtfs(gtfs, output_path, validator_path) list.files(output_path) #> [1] \"report.html\"           \"report.json\"           \"system_errors.json\"    #> [4] \"validation_stderr.txt\"  # works with feeds saved to disk new_output_path <- tempfile(\"new_validation_result\") validate_gtfs(data_path, new_output_path, validator_path) list.files(new_output_path) #> [1] \"report.html\"           \"report.json\"           \"system_errors.json\"    #> [4] \"validation_stderr.txt\"  # and with feeds pointed by an url newer_output_path <- tempfile(\"newer_validation_result\") gtfs_url <- \"https://github.com/ipeaGIT/gtfstools/raw/main/inst/extdata/spo_gtfs.zip\" validate_gtfs(gtfs_url, newer_output_path, validator_path) list.files(newer_output_path) #> [1] \"report.html\"           \"report.json\"           \"system_errors.json\"    #> [4] \"validation_stderr.txt\""},{"path":"https://ipeagit.github.io/gtfstools/dev/reference/write_gtfs.html","id":null,"dir":"Reference","previous_headings":"","what":"Write GTFS files — write_gtfs","title":"Write GTFS files — write_gtfs","text":"Writes GTFS objects GTFS .zip files.","code":""},{"path":"https://ipeagit.github.io/gtfstools/dev/reference/write_gtfs.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Write GTFS files — write_gtfs","text":"","code":"write_gtfs(   gtfs,   path,   files = NULL,   standard_only = FALSE,   as_dir = FALSE,   overwrite = TRUE,   quiet = TRUE )"},{"path":"https://ipeagit.github.io/gtfstools/dev/reference/write_gtfs.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Write GTFS files — write_gtfs","text":"gtfs GTFS object, created read_gtfs(). path path .zip file feed written . files character vector containing name elements written feed. NULL (default), elements inside GTFS object written. standard_only Whether write standard files fields (defaults FALSE, drop extra files fields). as_dir Whether write feed directory, instead .zip file (defaults FALSE, means field written zip file). overwrite Whether overwrite existing .zip file (defaults TRUE). quiet Whether hide log messages progress bars (defaults TRUE).","code":""},{"path":"https://ipeagit.github.io/gtfstools/dev/reference/write_gtfs.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Write GTFS files — write_gtfs","text":"Invisibly returns GTFS object passed gtfs parameter.","code":""},{"path":[]},{"path":"https://ipeagit.github.io/gtfstools/dev/reference/write_gtfs.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Write GTFS files — write_gtfs","text":"","code":"data_path <- system.file(\"extdata/spo_gtfs.zip\", package = \"gtfstools\") gtfs <- read_gtfs(data_path)  tmp_dir <- file.path(tempdir(), \"tmpdir\") dir.create(tmp_dir) list.files(tmp_dir) #' #> character(0) tmp_file <- tempfile(pattern = \"gtfs\", tmpdir = tmp_dir, fileext = \".zip\") write_gtfs(gtfs, tmp_file) list.files(tmp_dir) #> [1] \"gtfs1ae36ecbbd6e.zip\"  gtfs_all_files <- read_gtfs(tmp_file) names(gtfs_all_files) #> [1] \"agency\"      \"calendar\"    \"frequencies\" \"routes\"      \"shapes\"      #> [6] \"stop_times\"  \"stops\"       \"trips\"        write_gtfs(gtfs, tmp_file, files = \"stop_times\") gtfs_stop_times <- read_gtfs(tmp_file) names(gtfs_stop_times) #> [1] \"stop_times\""},{"path":[]},{"path":[]},{"path":[]},{"path":[]},{"path":"https://ipeagit.github.io/gtfstools/dev/news/index.html","id":"gtfstools-140","dir":"Changelog","previous_headings":"","what":"gtfstools 1.4.0","title":"gtfstools 1.4.0","text":"CRAN release: 2025-01-08","code":""},{"path":"https://ipeagit.github.io/gtfstools/dev/news/index.html","id":"new-features-1-4-0","dir":"Changelog","previous_headings":"","what":"New features","title":"gtfstools 1.4.0","text":"download_validator() validate_gtfs() now support using validator v5.0.0, v5.0.1 v6.0.0.","code":""},{"path":"https://ipeagit.github.io/gtfstools/dev/news/index.html","id":"notes-1-4-0","dir":"Changelog","previous_headings":"","what":"Notes","title":"gtfstools 1.4.0","text":"Removed local copies cpp11 functions, recent releases fix issues .","code":""},{"path":"https://ipeagit.github.io/gtfstools/dev/news/index.html","id":"gtfstools-130","dir":"Changelog","previous_headings":"","what":"gtfstools 1.3.0","title":"gtfstools 1.3.0","text":"CRAN release: 2024-10-07","code":""},{"path":"https://ipeagit.github.io/gtfstools/dev/news/index.html","id":"new-features-1-3-0","dir":"Changelog","previous_headings":"","what":"New features","title":"gtfstools 1.3.0","text":"New function convert_sf_to_shapes(). New generic function as_dt_gtfs() methods different classes (tidygtfs, gtfs list). gtfstools functions now accepts GTFS objects created packages, gtfsio tidytransit. filter_by_route_type() now accepts Google Transit’s extended route types. Thanks @Ge-Rag. convert_shapes_to_sf(), get_trip_geometry(), get_trip_length(), get_trip_speed(), get_trip_segment_duration() get_stop_times_patterns() now take additional argument sort_sequence, used indicate whether shapes/timetables ordered shape_pt_sequence/stop_sequence applying functions’ procedures. download_validator() validate_gtfs() now support using validator v4.1.0 v4.2.0. New parameters filter_by_stop_id(): include_children include_parents.","code":""},{"path":"https://ipeagit.github.io/gtfstools/dev/news/index.html","id":"bug-fixes-1-3-0","dir":"Changelog","previous_headings":"","what":"Bug fixes","title":"gtfstools 1.3.0","text":"Fixed bug convert_to_standard() date fields feed_info converted back integer standard format (YYYYMMDD). Filtering functions now also filter transfers table based trip_id route_id. Previously filter based stop_id. Thanks Daniel Langbein (@langbein-daniel). Fixed bug filter_by_route_id() feeds one agency omitted agency_id routes fare_attributes end empty agency table. filter_by_sf() now correctly throws error unsupported function passed spatial_operation.","code":""},{"path":"https://ipeagit.github.io/gtfstools/dev/news/index.html","id":"feature-deprecation-1-3-0","dir":"Changelog","previous_headings":"","what":"Feature deprecation","title":"gtfstools 1.3.0","text":"filter_by_stop_id() behavior filtering trips contain specified stops deprecated. backwards compatibility reasons, behavior still default current version controlled parameter full_trips. actually filter stop ids (behavior now believe appropriate), please use full_trips   = FALSE. behavior default version 2.0.0 onward. achieve old behavior, manually subset stop_times table stop_id specify trip_ids included output filter_by_trip_id(). filter_by_sf() deprecated favor filter_by_spatial_extent(). backwards compatibility reasons, usage filter_by_sf() still allowed curent version, function removed package version 2.0.0.","code":""},{"path":"https://ipeagit.github.io/gtfstools/dev/news/index.html","id":"notes-1-3-0","dir":"Changelog","previous_headings":"","what":"Notes","title":"gtfstools 1.3.0","text":"validate_gtfs() now defaults run sequentially. Previously default run parallelly using available cores. Heavily inspired Henrik Bengtsson post “Please Avoid detectCores() R packages” (https://www.jottr.org/2022/12/05/avoid-detectcores/). Improved performance seconds_to_string() , consequently, functions use . Improved performance improved readability filtering functions.","code":""},{"path":"https://ipeagit.github.io/gtfstools/dev/news/index.html","id":"gtfstools-120","dir":"Changelog","previous_headings":"","what":"gtfstools 1.2.0","title":"gtfstools 1.2.0","text":"CRAN release: 2022-11-24","code":""},{"path":"https://ipeagit.github.io/gtfstools/dev/news/index.html","id":"new-features-1-2-0","dir":"Changelog","previous_headings":"","what":"New features","title":"gtfstools 1.2.0","text":"New validate_gtfs() behavior. Now used run MobilityData Canonical GTFS validator feed. old behavior marked deprecated since v1.0.0. New function download_validator(). New vignette demonstrating validate feeds.","code":""},{"path":"https://ipeagit.github.io/gtfstools/dev/news/index.html","id":"bug-fixes-1-2-0","dir":"Changelog","previous_headings":"","what":"Bug fixes","title":"gtfstools 1.2.0","text":"Fixed bug write_gtfs() prevented as_dir = TRUE used. Fixed bug set_trip_speed() resulted invalid stop_times tables max(stop_sequence) higher number stops given trip. Thanks Alena Stern (@alenastern). Fixed bug set_trip_speed() resulted speed wrong trip_ids updated order ids appear trips stop_times tables. Thanks Alena Stern (@alenastern).","code":""},{"path":"https://ipeagit.github.io/gtfstools/dev/news/index.html","id":"gtfstools-110","dir":"Changelog","previous_headings":"","what":"gtfstools 1.1.0","title":"gtfstools 1.1.0","text":"CRAN release: 2022-05-24","code":""},{"path":"https://ipeagit.github.io/gtfstools/dev/news/index.html","id":"new-features-1-1-0","dir":"Changelog","previous_headings":"","what":"New features","title":"gtfstools 1.1.0","text":"New function convert_time_to_seconds(). New function filter_by_agency_id(). New function filter_by_service_id(). New function filter_by_time_of_day(). New function filter_by_weekday(). New function frequencies_to_stop_times(). New function get_children_stops(). New function get_stop_times_patterns(). New function get_trip_length(). New parameter merge_gtfs(): prefix. warnings parameter flagged deprecated. Functions get_parent_station() get_children_stops now accept stop_id = NULL analyze stop_ids stops table.","code":""},{"path":"https://ipeagit.github.io/gtfstools/dev/news/index.html","id":"bug-fixes-1-1-0","dir":"Changelog","previous_headings":"","what":"Bug fixes","title":"gtfstools 1.1.0","text":"Fixed bug get_trip_segment_duration() list wrong segment numbers, necessarily starting 1. Now segment numbers always range 1 N, N total number segments compose trip. Fixed bug filter_by_{route,service,shape,trip}_id() resulted agency table getting filtered specified id character(0).","code":""},{"path":"https://ipeagit.github.io/gtfstools/dev/news/index.html","id":"notes-1-1-0","dir":"Changelog","previous_headings":"","what":"Notes","title":"gtfstools 1.1.0","text":"Performance improvements get_trip_geometry(), get_trip_duration(), get_trip_segment_duration() convert_shapes_to_sf(). Stopped ordering points shape_pt_sequence/stop_sequence get_trip_geometry() convert_shapes_to_sf(), since GTFS reference says stop_times shapes tables must ordered point/stop sequence anyway. Removed lwgeom dependencies (Suggests), now ’s required run get_trip_speed() set_trip_speed() anymore. Removed warnings parameter read_gtfs() write_gtfs() optional extra parameters write_gtfs(), flagged deprecated gtfstools v1.0.0. Updated filtering vignette demonstrate new functions.","code":""},{"path":"https://ipeagit.github.io/gtfstools/dev/news/index.html","id":"gtfstools-100","dir":"Changelog","previous_headings":"","what":"gtfstools 1.0.0","title":"gtfstools 1.0.0","text":"CRAN release: 2021-11-16","code":""},{"path":"https://ipeagit.github.io/gtfstools/dev/news/index.html","id":"new-features-1-0-0","dir":"Changelog","previous_headings":"","what":"New features","title":"gtfstools 1.0.0","text":"New function convert_stops_to_sf(). New function convert_shapes_to_sf(). New function filter_by_route_type(). New function filter_by_route_id(). New function filter_by_sf(). New function filter_by_shape_id(). New function filter_by_stop_id(). New function filter_by_trip_id(). New function get_parent_station(). New function remove_duplicates(). New parameters read_gtfs(): fields, skip encoding. warnings parameter flagged deprecated. New parameters write_gtfs(): files, standard_only as_dir. substitute previously existent optional extra, flagged deprecated. warnings parameter flagged deprecated . New vignette exploring filtering functions.","code":""},{"path":"https://ipeagit.github.io/gtfstools/dev/news/index.html","id":"bug-fixes-1-0-0","dir":"Changelog","previous_headings":"","what":"Bug fixes","title":"gtfstools 1.0.0","text":"get_trip_speed() set_trip_speed() examples tests now run lwgeom installed. lwgeom sf “soft” dependency required functions, listed Suggests. However, package checks fail gracefully wasn’t installed, now fixed. Fixed bug crs passed get_trip_geometry() assigned result without actually reprojecting . Changed behaviour get_trip_geometry() raise error ‘file’ parameter left untouched GTFS object doesn’t contain either shapes stop_times table. Closes #29. Fixed bug cause merge_gtfs() create objects inherited dt_gtfs (ignoring gtfs list). Fixed bug get_trip_speed() returned NA speeds specified trip_id listed trips, stop_times. Adjusted set_trip_speed() stop raising max()-related warning none specified trip_ids exists.","code":""},{"path":"https://ipeagit.github.io/gtfstools/dev/news/index.html","id":"notes-1-0-0","dir":"Changelog","previous_headings":"","what":"Notes","title":"gtfstools 1.0.0","text":"utility functions previously provided {gtfs2gps} now exported gtfstools. Huge thanks whole gtfs2gps crew (Rafael Pereira @rafapereirabr, Pedro Andrade @pedro-andrade-inpe João Bazzo @Joaobazzo)! package now imports gtfsio, many functions now heavily rely , read_gtfs() write_gtfs(). Internal function string_to_seconds() now runs much faster thanks Mark Padgham (@mpadge). get_trip_geometry() now runs much faster due data.table-related optimizations.","code":""},{"path":"https://ipeagit.github.io/gtfstools/dev/news/index.html","id":"potentially-breaking-changes-1-0-0","dir":"Changelog","previous_headings":"","what":"Potentially breaking changes","title":"gtfstools 1.0.0","text":"Functions longer validate GTFS objects usage. validate_gtfs() flagged deprecated well, since plan heavily change usability outputs future versions. write_gtfs() parameters went major changes - optional extra params flagged deprecated substituted general files standard_only.","code":""},{"path":"https://ipeagit.github.io/gtfstools/dev/news/index.html","id":"gtfstools-010","dir":"Changelog","previous_headings":"","what":"gtfstools 0.1.0","title":"gtfstools 0.1.0","text":"CRAN release: 2021-02-23 Initial CRAN release.","code":""}]
